# -*- coding: utf-8 -*-

# Copyright 2014-2018 by Christopher C. Little.
# This file is part of Abydos.
#
# Abydos is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Abydos is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Abydos. If not, see <http://www.gnu.org/licenses/>.

"""abydos.tests.phonetic.test_phonetic_double_metaphone.

This module contains unit tests for abydos.phonetic.DoubleMetaphone
"""

from __future__ import (
    absolute_import,
    division,
    print_function,
    unicode_literals,
)

import unittest

from abydos.phonetic import DoubleMetaphone, double_metaphone


class DoubleMetaphoneTestCases(unittest.TestCase):
    """Test Double Metaphone functions.

    test cases for abydos.phonetic.DoubleMetaphone

    These test cases are copied from two sources:
    https://github.com/oubiwann/metaphone/blob/master/metaphone/tests/test_metaphone.py
    and
    http://swoodbridge.com/DoubleMetaPhone/surnames.txt

    Most test cases other than those in test_surnames and test_surnames4 come
    from the former and are under the following license:

        Copyright (c) 2007 Andrew Collins, Chris Leong
        Copyright (c) 2009 Matthew Somerville
        Copyright (c) 2010 Maximillian Dornseif, Richard Barran
        Copyright (c) 2012 Duncan McGreggor
        All rights reserved.

         * Redistribution and use in source and binary forms, with or without
            modification, are permitted provided that the following conditions
            are met:

         * Redistributions of source code must retain the above copyright
             notice, this list of conditions and the following disclaimer.

         * Redistributions in binary form must reproduce the above copyright
            notice, this list of conditions and the following disclaimer in
            the documentation and/or other materials provided with the
            distribution.

        Neither the name "Metaphone" nor the names of its contributors may be
        used to endorse or promote products derived from this software without
        specific prior written permission.

        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    test_surname and test_surname4 come from a set of tests for a PHP port
    of Double Metaphone that is Copyright 2001, Stephen Woodbridge and
    identified as 'freely distributable'
    """

    pa = DoubleMetaphone()

    def test_double_metaphone(self):
        """Test abydos.phonetic.DoubleMetaphone."""
        # base case
        self.assertEqual(self.pa.encode(''), ('', ''))

        # single result
        self.assertEqual(self.pa.encode('aubrey'), ('APR', ''))

        # double result
        self.assertEqual(self.pa.encode('richard'), ('RXRT', 'RKRT'))

        # general word list
        self.assertEqual(self.pa.encode('Jose'), ('HS', ''))
        self.assertEqual(self.pa.encode('cambrillo'), ('KMPRL', 'KMPR'))
        self.assertEqual(self.pa.encode('otto'), ('AT', ''))
        self.assertEqual(self.pa.encode('aubrey'), ('APR', ''))
        self.assertEqual(self.pa.encode('maurice'), ('MRS', ''))
        self.assertEqual(self.pa.encode('auto'), ('AT', ''))
        self.assertEqual(self.pa.encode('maisey'), ('MS', ''))
        self.assertEqual(self.pa.encode('catherine'), ('K0RN', 'KTRN'))
        self.assertEqual(self.pa.encode('geoff'), ('JF', 'KF'))
        self.assertEqual(self.pa.encode('Chile'), ('XL', ''))
        self.assertEqual(self.pa.encode('katherine'), ('K0RN', 'KTRN'))
        self.assertEqual(self.pa.encode('steven'), ('STFN', ''))
        self.assertEqual(self.pa.encode('zhang'), ('JNK', ''))
        self.assertEqual(self.pa.encode('bob'), ('PP', ''))
        self.assertEqual(self.pa.encode('ray'), ('R', ''))
        self.assertEqual(self.pa.encode('Tux'), ('TKS', ''))
        self.assertEqual(self.pa.encode('bryan'), ('PRN', ''))
        self.assertEqual(self.pa.encode('bryce'), ('PRS', ''))
        self.assertEqual(self.pa.encode('Rapelje'), ('RPL', ''))
        self.assertEqual(self.pa.encode('richard'), ('RXRT', 'RKRT'))
        self.assertEqual(self.pa.encode('solilijs'), ('SLLS', ''))
        self.assertEqual(self.pa.encode('Dallas'), ('TLS', ''))
        self.assertEqual(self.pa.encode('Schwein'), ('XN', 'XFN'))
        self.assertEqual(self.pa.encode('dave'), ('TF', ''))
        self.assertEqual(self.pa.encode('eric'), ('ARK', ''))
        self.assertEqual(self.pa.encode('Parachute'), ('PRKT', ''))
        self.assertEqual(self.pa.encode('brian'), ('PRN', ''))
        self.assertEqual(self.pa.encode('randy'), ('RNT', ''))
        self.assertEqual(self.pa.encode('Through'), ('0R', 'TR'))
        self.assertEqual(self.pa.encode('Nowhere'), ('NR', ''))
        self.assertEqual(self.pa.encode('heidi'), ('HT', ''))
        self.assertEqual(self.pa.encode('Arnow'), ('ARN', 'ARNF'))
        self.assertEqual(self.pa.encode('Thumbail'), ('0MPL', 'TMPL'))

        # homophones
        self.assertEqual(self.pa.encode('tolled'), self.pa.encode('told'))
        self.assertEqual(
            self.pa.encode('katherine'), self.pa.encode('catherine')
        )
        self.assertEqual(self.pa.encode('brian'), self.pa.encode('bryan'))

        # similar names
        self.assertEqual(self.pa.encode('Bartoš'), ('PRT', ''))
        self.assertEqual(self.pa.encode('Bartosz'), ('PRTS', 'PRTX'))
        self.assertEqual(self.pa.encode('Bartosch'), ('PRTX', ''))
        self.assertEqual(self.pa.encode('Bartos'), ('PRTS', ''))
        self.assertEqual(
            list(
                set(self.pa.encode('Jablonski')).intersection(
                    self.pa.encode('Yablonsky')
                )
            ),
            ['APLNSK'],
        )
        self.assertEqual(
            list(
                set(self.pa.encode('Smith')).intersection(
                    self.pa.encode('Schmidt')
                )
            ),
            ['XMT'],
        )

        # non-English Unicode
        self.assertEqual(self.pa.encode('andestādītu'), ('ANTSTTT', ''))

        # c-cedilla
        self.assertEqual(self.pa.encode('français'), ('FRNS', 'FRNSS'))
        self.assertEqual(self.pa.encode('garçon'), ('KRSN', ''))
        self.assertEqual(self.pa.encode('leçon'), ('LSN', ''))

        # German words
        self.assertEqual(self.pa.encode('ach'), ('AK', ''))
        self.assertEqual(self.pa.encode('bacher'), ('PKR', ''))
        self.assertEqual(self.pa.encode('macher'), ('MKR', ''))

        # Italian words
        self.assertEqual(self.pa.encode('bacci'), ('PX', ''))
        self.assertEqual(self.pa.encode('bertucci'), ('PRTX', ''))
        self.assertEqual(self.pa.encode('bellocchio'), ('PLX', ''))
        self.assertEqual(self.pa.encode('bacchus'), ('PKS', ''))
        self.assertEqual(self.pa.encode('focaccia'), ('FKX', ''))
        self.assertEqual(self.pa.encode('chianti'), ('KNT', ''))
        self.assertEqual(self.pa.encode('tagliaro'), ('TKLR', 'TLR'))
        self.assertEqual(self.pa.encode('biaggi'), ('PJ', 'PK'))

        # Spanish words
        self.assertEqual(self.pa.encode('bajador'), ('PJTR', 'PHTR'))
        self.assertEqual(self.pa.encode('cabrillo'), ('KPRL', 'KPR'))
        self.assertEqual(self.pa.encode('gallegos'), ('KLKS', 'KKS'))
        self.assertEqual(self.pa.encode('San Jacinto'), ('SNHSNT', ''))

        # French words
        self.assertEqual(self.pa.encode('rogier'), ('RJ', 'RJR'))
        self.assertEqual(self.pa.encode('breaux'), ('PR', ''))

        # Slavic words
        self.assertEqual(self.pa.encode('Wewski'), ('ASK', 'FFSK'))

        # Chinese words
        self.assertEqual(self.pa.encode('zhao'), ('J', ''))

        # Dutch-origin words
        self.assertEqual(self.pa.encode('school'), ('SKL', ''))
        self.assertEqual(self.pa.encode('schooner'), ('SKNR', ''))
        self.assertEqual(self.pa.encode('schermerhorn'), ('XRMRRN', 'SKRMRRN'))
        self.assertEqual(self.pa.encode('schenker'), ('XNKR', 'SKNKR'))

        # <ch> words
        self.assertEqual(self.pa.encode('Charac'), ('KRK', ''))
        self.assertEqual(self.pa.encode('Charis'), ('KRS', ''))
        self.assertEqual(self.pa.encode('chord'), ('KRT', ''))
        self.assertEqual(self.pa.encode('Chym'), ('KM', ''))
        self.assertEqual(self.pa.encode('Chia'), ('K', ''))
        self.assertEqual(self.pa.encode('chem'), ('KM', ''))
        self.assertEqual(self.pa.encode('chore'), ('XR', ''))
        self.assertEqual(self.pa.encode('orchestra'), ('ARKSTR', ''))
        self.assertEqual(self.pa.encode('architect'), ('ARKTKT', ''))
        self.assertEqual(self.pa.encode('orchid'), ('ARKT', ''))

        # <cc> words
        self.assertEqual(self.pa.encode('accident'), ('AKSTNT', ''))
        self.assertEqual(self.pa.encode('accede'), ('AKST', ''))
        self.assertEqual(self.pa.encode('succeed'), ('SKST', ''))

        # <mc> words
        self.assertEqual(self.pa.encode('mac caffrey'), ('MKFR', ''))
        self.assertEqual(self.pa.encode('mac gregor'), ('MKRKR', ''))
        self.assertEqual(self.pa.encode('mc crae'), ('MKR', ''))
        self.assertEqual(self.pa.encode('mcclain'), ('MKLN', ''))

        # <gh> words
        self.assertEqual(self.pa.encode('laugh'), ('LF', ''))
        self.assertEqual(self.pa.encode('cough'), ('KF', ''))
        self.assertEqual(self.pa.encode('rough'), ('RF', ''))

        # <g__> words
        self.assertEqual(self.pa.encode('gya'), ('K', 'J'))
        self.assertEqual(self.pa.encode('ges'), ('KS', 'JS'))
        self.assertEqual(self.pa.encode('gep'), ('KP', 'JP'))
        self.assertEqual(self.pa.encode('geb'), ('KP', 'JP'))
        self.assertEqual(self.pa.encode('gel'), ('KL', 'JL'))
        self.assertEqual(self.pa.encode('gey'), ('K', 'J'))
        self.assertEqual(self.pa.encode('gib'), ('KP', 'JP'))
        self.assertEqual(self.pa.encode('gil'), ('KL', 'JL'))
        self.assertEqual(self.pa.encode('gin'), ('KN', 'JN'))
        self.assertEqual(self.pa.encode('gie'), ('K', 'J'))
        self.assertEqual(self.pa.encode('gei'), ('K', 'J'))
        self.assertEqual(self.pa.encode('ger'), ('KR', 'JR'))
        self.assertEqual(self.pa.encode('danger'), ('TNJR', 'TNKR'))
        self.assertEqual(self.pa.encode('manager'), ('MNKR', 'MNJR'))
        self.assertEqual(self.pa.encode('dowager'), ('TKR', 'TJR'))

        # <pb> words
        self.assertEqual(self.pa.encode('Campbell'), ('KMPL', ''))
        self.assertEqual(self.pa.encode('raspberry'), ('RSPR', ''))

        # <th> words
        self.assertEqual(self.pa.encode('Thomas'), ('TMS', ''))
        self.assertEqual(self.pa.encode('Thames'), ('TMS', ''))

        # etc. (for code coverage)
        self.assertEqual(self.pa.encode('Xavier'), ('SF', 'SFR'))
        self.assertEqual(self.pa.encode('Michael'), ('MKL', 'MXL'))
        self.assertEqual(self.pa.encode('Ignacio'), ('AKNS', 'ANX'))
        self.assertEqual(self.pa.encode('Ajjam'), ('AJM', ''))
        self.assertEqual(self.pa.encode('Akkad'), ('AKT', ''))
        self.assertEqual(self.pa.encode('Año'), ('AN', ''))
        self.assertEqual(self.pa.encode('Año'), self.pa.encode('Anno'))
        self.assertEqual(self.pa.encode('Caucasian'), ('KKSN', 'KKXN'))
        self.assertEqual(self.pa.encode('Kaukasian'), ('KKSN', ''))
        self.assertEqual(self.pa.encode('Zaqqum'), ('SKM', ''))
        self.assertEqual(self.pa.encode('stevven'), ('STFN', ''))
        self.assertEqual(self.pa.encode('Tuxx'), ('TKS', ''))
        self.assertEqual(self.pa.encode('Ghiradelli'), ('JRTL', ''))
        self.assertEqual(self.pa.encode('ghoul'), ('KL', ''))
        self.assertEqual(self.pa.encode('hej'), ('HJ', 'H'))

        # max_length bounds tests
        self.assertEqual(self.pa.encode('Niall', max_length=-1), ('NL', ''))
        self.assertEqual(self.pa.encode('Niall', max_length=0), ('NL', ''))

        # Test wrapper
        self.assertEqual(double_metaphone('cambrillo'), ('KMPRL', 'KMPR'))

    def test_double_metaphone_surnames(self):
        """Test abydos.phonetic.DoubleMetaphone (surname data)."""
        self.assertEqual(self.pa.encode(''), ('', ''))
        self.assertEqual(self.pa.encode('ALLERTON'), ('ALRTN', ''))
        self.assertEqual(self.pa.encode('Acton'), ('AKTN', ''))
        self.assertEqual(self.pa.encode('Adams'), ('ATMS', ''))
        self.assertEqual(self.pa.encode('Aggar'), ('AKR', ''))
        self.assertEqual(self.pa.encode('Ahl'), ('AL', ''))
        self.assertEqual(self.pa.encode('Aiken'), ('AKN', ''))
        self.assertEqual(self.pa.encode('Alan'), ('ALN', ''))
        self.assertEqual(self.pa.encode('Alcock'), ('ALKK', ''))
        self.assertEqual(self.pa.encode('Alden'), ('ALTN', ''))
        self.assertEqual(self.pa.encode('Aldham'), ('ALTM', ''))
        self.assertEqual(self.pa.encode('Allen'), ('ALN', ''))
        self.assertEqual(self.pa.encode('Allerton'), ('ALRTN', ''))
        self.assertEqual(self.pa.encode('Alsop'), ('ALSP', ''))
        self.assertEqual(self.pa.encode('Alwein'), ('ALN', ''))
        self.assertEqual(self.pa.encode('Ambler'), ('AMPLR', ''))
        self.assertEqual(self.pa.encode('Andevill'), ('ANTFL', ''))
        self.assertEqual(self.pa.encode('Andrews'), ('ANTRS', ''))
        self.assertEqual(self.pa.encode('Andreyco'), ('ANTRK', ''))
        self.assertEqual(self.pa.encode('Andriesse'), ('ANTRS', ''))
        self.assertEqual(self.pa.encode('Angier'), ('ANJ', 'ANJR'))
        self.assertEqual(self.pa.encode('Annabel'), ('ANPL', ''))
        self.assertEqual(self.pa.encode('Anne'), ('AN', ''))
        self.assertEqual(self.pa.encode('Anstye'), ('ANST', ''))
        self.assertEqual(self.pa.encode('Appling'), ('APLNK', ''))
        self.assertEqual(self.pa.encode('Apuke'), ('APK', ''))
        self.assertEqual(self.pa.encode('Arnold'), ('ARNLT', ''))
        self.assertEqual(self.pa.encode('Ashby'), ('AXP', ''))
        self.assertEqual(self.pa.encode('Astwood'), ('ASTT', ''))
        self.assertEqual(self.pa.encode('Atkinson'), ('ATKNSN', ''))
        self.assertEqual(self.pa.encode('Audley'), ('ATL', ''))
        self.assertEqual(self.pa.encode('Austin'), ('ASTN', ''))
        self.assertEqual(self.pa.encode('Avenal'), ('AFNL', ''))
        self.assertEqual(self.pa.encode('Ayer'), ('AR', ''))
        self.assertEqual(self.pa.encode('Ayot'), ('AT', ''))
        self.assertEqual(self.pa.encode('Babbitt'), ('PPT', ''))
        self.assertEqual(self.pa.encode('Bachelor'), ('PXLR', 'PKLR'))
        self.assertEqual(self.pa.encode('Bachelour'), ('PXLR', 'PKLR'))
        self.assertEqual(self.pa.encode('Bailey'), ('PL', ''))
        self.assertEqual(self.pa.encode('Baivel'), ('PFL', ''))
        self.assertEqual(self.pa.encode('Baker'), ('PKR', ''))
        self.assertEqual(self.pa.encode('Baldwin'), ('PLTN', ''))
        self.assertEqual(self.pa.encode('Balsley'), ('PLSL', ''))
        self.assertEqual(self.pa.encode('Barber'), ('PRPR', ''))
        self.assertEqual(self.pa.encode('Barker'), ('PRKR', ''))
        self.assertEqual(self.pa.encode('Barlow'), ('PRL', 'PRLF'))
        self.assertEqual(self.pa.encode('Barnard'), ('PRNRT', ''))
        self.assertEqual(self.pa.encode('Barnes'), ('PRNS', ''))
        self.assertEqual(self.pa.encode('Barnsley'), ('PRNSL', ''))
        self.assertEqual(self.pa.encode('Barouxis'), ('PRKSS', ''))
        self.assertEqual(self.pa.encode('Bartlet'), ('PRTLT', ''))
        self.assertEqual(self.pa.encode('Basley'), ('PSL', ''))
        self.assertEqual(self.pa.encode('Basset'), ('PST', ''))
        self.assertEqual(self.pa.encode('Bassett'), ('PST', ''))
        self.assertEqual(self.pa.encode('Batchlor'), ('PXLR', ''))
        self.assertEqual(self.pa.encode('Bates'), ('PTS', ''))
        self.assertEqual(self.pa.encode('Batson'), ('PTSN', ''))
        self.assertEqual(self.pa.encode('Bayes'), ('PS', ''))
        self.assertEqual(self.pa.encode('Bayley'), ('PL', ''))
        self.assertEqual(self.pa.encode('Beale'), ('PL', ''))
        self.assertEqual(self.pa.encode('Beauchamp'), ('PXMP', 'PKMP'))
        self.assertEqual(self.pa.encode('Beauclerc'), ('PKLRK', ''))
        self.assertEqual(self.pa.encode('Beech'), ('PK', ''))
        self.assertEqual(self.pa.encode('Beers'), ('PRS', ''))
        self.assertEqual(self.pa.encode('Beke'), ('PK', ''))
        self.assertEqual(self.pa.encode('Belcher'), ('PLXR', 'PLKR'))
        self.assertEqual(self.pa.encode('Benjamin'), ('PNJMN', ''))
        self.assertEqual(self.pa.encode('Benningham'), ('PNNKM', ''))
        self.assertEqual(self.pa.encode('Bereford'), ('PRFRT', ''))
        self.assertEqual(self.pa.encode('Bergen'), ('PRJN', 'PRKN'))
        self.assertEqual(self.pa.encode('Berkeley'), ('PRKL', ''))
        self.assertEqual(self.pa.encode('Berry'), ('PR', ''))
        self.assertEqual(self.pa.encode('Besse'), ('PS', ''))
        self.assertEqual(self.pa.encode('Bessey'), ('PS', ''))
        self.assertEqual(self.pa.encode('Bessiles'), ('PSLS', ''))
        self.assertEqual(self.pa.encode('Bigelow'), ('PJL', 'PKLF'))
        self.assertEqual(self.pa.encode('Bigg'), ('PK', ''))
        self.assertEqual(self.pa.encode('Bigod'), ('PKT', ''))
        self.assertEqual(self.pa.encode('Billings'), ('PLNKS', ''))
        self.assertEqual(self.pa.encode('Bimper'), ('PMPR', ''))
        self.assertEqual(self.pa.encode('Binker'), ('PNKR', ''))
        self.assertEqual(self.pa.encode('Birdsill'), ('PRTSL', ''))
        self.assertEqual(self.pa.encode('Bishop'), ('PXP', ''))
        self.assertEqual(self.pa.encode('Black'), ('PLK', ''))
        self.assertEqual(self.pa.encode('Blagge'), ('PLK', ''))
        self.assertEqual(self.pa.encode('Blake'), ('PLK', ''))
        self.assertEqual(self.pa.encode('Blanck'), ('PLNK', ''))
        self.assertEqual(self.pa.encode('Bledsoe'), ('PLTS', ''))
        self.assertEqual(self.pa.encode('Blennerhasset'), ('PLNRST', ''))
        self.assertEqual(self.pa.encode('Blessing'), ('PLSNK', ''))
        self.assertEqual(self.pa.encode('Blewett'), ('PLT', ''))
        self.assertEqual(self.pa.encode('Bloctgoed'), ('PLKTKT', ''))
        self.assertEqual(self.pa.encode('Bloetgoet'), ('PLTKT', ''))
        self.assertEqual(self.pa.encode('Bloodgood'), ('PLTKT', ''))
        self.assertEqual(self.pa.encode('Blossom'), ('PLSM', ''))
        self.assertEqual(self.pa.encode('Blount'), ('PLNT', ''))
        self.assertEqual(self.pa.encode('Bodine'), ('PTN', ''))
        self.assertEqual(self.pa.encode('Bodman'), ('PTMN', ''))
        self.assertEqual(self.pa.encode('BonCoeur'), ('PNKR', ''))
        self.assertEqual(self.pa.encode('Bond'), ('PNT', ''))
        self.assertEqual(self.pa.encode('Boscawen'), ('PSKN', ''))
        self.assertEqual(self.pa.encode('Bosworth'), ('PSR0', 'PSRT'))
        self.assertEqual(self.pa.encode('Bouchier'), ('PX', 'PKR'))
        self.assertEqual(self.pa.encode('Bowne'), ('PN', ''))
        self.assertEqual(self.pa.encode('Bradbury'), ('PRTPR', ''))
        self.assertEqual(self.pa.encode('Bradder'), ('PRTR', ''))
        self.assertEqual(self.pa.encode('Bradford'), ('PRTFRT', ''))
        self.assertEqual(self.pa.encode('Bradstreet'), ('PRTSTRT', ''))
        self.assertEqual(self.pa.encode('Braham'), ('PRHM', ''))
        self.assertEqual(self.pa.encode('Brailsford'), ('PRLSFRT', ''))
        self.assertEqual(self.pa.encode('Brainard'), ('PRNRT', ''))
        self.assertEqual(self.pa.encode('Brandish'), ('PRNTX', ''))
        self.assertEqual(self.pa.encode('Braun'), ('PRN', ''))
        self.assertEqual(self.pa.encode('Brecc'), ('PRK', ''))
        self.assertEqual(self.pa.encode('Brent'), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Brenton'), ('PRNTN', ''))
        self.assertEqual(self.pa.encode('Briggs'), ('PRKS', ''))
        self.assertEqual(self.pa.encode('Brigham'), ('PRM', ''))
        self.assertEqual(self.pa.encode('Brobst'), ('PRPST', ''))
        self.assertEqual(self.pa.encode('Brome'), ('PRM', ''))
        self.assertEqual(self.pa.encode('Bronson'), ('PRNSN', ''))
        self.assertEqual(self.pa.encode('Brooks'), ('PRKS', ''))
        self.assertEqual(self.pa.encode('Brouillard'), ('PRLRT', ''))
        self.assertEqual(self.pa.encode('Brown'), ('PRN', ''))
        self.assertEqual(self.pa.encode('Browne'), ('PRN', ''))
        self.assertEqual(self.pa.encode('Brownell'), ('PRNL', ''))
        self.assertEqual(self.pa.encode('Bruley'), ('PRL', ''))
        self.assertEqual(self.pa.encode('Bryant'), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Brzozowski'), ('PRSSSK', 'PRTSTSFSK'))
        self.assertEqual(self.pa.encode('Buide'), ('PT', ''))
        self.assertEqual(self.pa.encode('Bulmer'), ('PLMR', ''))
        self.assertEqual(self.pa.encode('Bunker'), ('PNKR', ''))
        self.assertEqual(self.pa.encode('Burden'), ('PRTN', ''))
        self.assertEqual(self.pa.encode('Burge'), ('PRJ', 'PRK'))
        self.assertEqual(self.pa.encode('Burgoyne'), ('PRKN', ''))
        self.assertEqual(self.pa.encode('Burke'), ('PRK', ''))
        self.assertEqual(self.pa.encode('Burnett'), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Burpee'), ('PRP', ''))
        self.assertEqual(self.pa.encode('Bursley'), ('PRSL', ''))
        self.assertEqual(self.pa.encode('Burton'), ('PRTN', ''))
        self.assertEqual(self.pa.encode('Bushnell'), ('PXNL', ''))
        self.assertEqual(self.pa.encode('Buss'), ('PS', ''))
        self.assertEqual(self.pa.encode('Buswell'), ('PSL', ''))
        self.assertEqual(self.pa.encode('Butler'), ('PTLR', ''))
        self.assertEqual(self.pa.encode('Calkin'), ('KLKN', ''))
        self.assertEqual(self.pa.encode('Canada'), ('KNT', ''))
        self.assertEqual(self.pa.encode('Canmore'), ('KNMR', ''))
        self.assertEqual(self.pa.encode('Canney'), ('KN', ''))
        self.assertEqual(self.pa.encode('Capet'), ('KPT', ''))
        self.assertEqual(self.pa.encode('Card'), ('KRT', ''))
        self.assertEqual(self.pa.encode('Carman'), ('KRMN', ''))
        self.assertEqual(self.pa.encode('Carpenter'), ('KRPNTR', ''))
        self.assertEqual(self.pa.encode('Cartwright'), ('KRTRT', ''))
        self.assertEqual(self.pa.encode('Casey'), ('KS', ''))
        self.assertEqual(self.pa.encode('Catterfield'), ('KTRFLT', ''))
        self.assertEqual(self.pa.encode('Ceeley'), ('SL', ''))
        self.assertEqual(self.pa.encode('Chambers'), ('XMPRS', ''))
        self.assertEqual(self.pa.encode('Champion'), ('XMPN', ''))
        self.assertEqual(self.pa.encode('Chapman'), ('XPMN', ''))
        self.assertEqual(self.pa.encode('Chase'), ('XS', ''))
        self.assertEqual(self.pa.encode('Cheney'), ('XN', ''))
        self.assertEqual(self.pa.encode('Chetwynd'), ('XTNT', ''))
        self.assertEqual(self.pa.encode('Chevalier'), ('XFL', 'XFLR'))
        self.assertEqual(
            self.pa.encode('Chillingsworth'), ('XLNKSR0', 'XLNKSRT')
        )
        self.assertEqual(self.pa.encode('Christie'), ('KRST', ''))
        self.assertEqual(self.pa.encode('Chubbuck'), ('XPK', ''))
        self.assertEqual(self.pa.encode('Church'), ('XRX', 'XRK'))
        self.assertEqual(self.pa.encode('Clark'), ('KLRK', ''))
        self.assertEqual(self.pa.encode('Clarke'), ('KLRK', ''))
        self.assertEqual(self.pa.encode('Cleare'), ('KLR', ''))
        self.assertEqual(self.pa.encode('Clement'), ('KLMNT', ''))
        self.assertEqual(self.pa.encode('Clerke'), ('KLRK', ''))
        self.assertEqual(self.pa.encode('Clibben'), ('KLPN', ''))
        self.assertEqual(self.pa.encode('Clifford'), ('KLFRT', ''))
        self.assertEqual(self.pa.encode('Clivedon'), ('KLFTN', ''))
        self.assertEqual(self.pa.encode('Close'), ('KLS', ''))
        self.assertEqual(self.pa.encode('Clothilde'), ('KL0LT', 'KLTLT'))
        self.assertEqual(self.pa.encode('Cobb'), ('KP', ''))
        self.assertEqual(self.pa.encode('Coburn'), ('KPRN', ''))
        self.assertEqual(self.pa.encode('Coburne'), ('KPRN', ''))
        self.assertEqual(self.pa.encode('Cocke'), ('KK', ''))
        self.assertEqual(self.pa.encode('Coffin'), ('KFN', ''))
        self.assertEqual(self.pa.encode('Coffyn'), ('KFN', ''))
        self.assertEqual(self.pa.encode('Colborne'), ('KLPRN', ''))
        self.assertEqual(self.pa.encode('Colby'), ('KLP', ''))
        self.assertEqual(self.pa.encode('Cole'), ('KL', ''))
        self.assertEqual(self.pa.encode('Coleman'), ('KLMN', ''))
        self.assertEqual(self.pa.encode('Collier'), ('KL', 'KLR'))
        self.assertEqual(self.pa.encode('Compton'), ('KMPTN', ''))
        self.assertEqual(self.pa.encode('Cone'), ('KN', ''))
        self.assertEqual(self.pa.encode('Cook'), ('KK', ''))
        self.assertEqual(self.pa.encode('Cooke'), ('KK', ''))
        self.assertEqual(self.pa.encode('Cooper'), ('KPR', ''))
        self.assertEqual(self.pa.encode('Copperthwaite'), ('KPR0T', 'KPRTT'))
        self.assertEqual(self.pa.encode('Corbet'), ('KRPT', ''))
        self.assertEqual(self.pa.encode('Corell'), ('KRL', ''))
        self.assertEqual(self.pa.encode('Corey'), ('KR', ''))
        self.assertEqual(self.pa.encode('Corlies'), ('KRLS', ''))
        self.assertEqual(self.pa.encode('Corneliszen'), ('KRNLSN', 'KRNLXN'))
        self.assertEqual(self.pa.encode('Cornelius'), ('KRNLS', ''))
        self.assertEqual(self.pa.encode('Cornwallis'), ('KRNLS', ''))
        self.assertEqual(self.pa.encode('Cosgrove'), ('KSKRF', ''))
        self.assertEqual(self.pa.encode('Count of Brionne'), ('KNTFPRN', ''))
        self.assertEqual(self.pa.encode('Covill'), ('KFL', ''))
        self.assertEqual(self.pa.encode('Cowperthwaite'), ('KPR0T', 'KPRTT'))
        self.assertEqual(self.pa.encode('Cowperwaite'), ('KPRT', ''))
        self.assertEqual(self.pa.encode('Crane'), ('KRN', ''))
        self.assertEqual(self.pa.encode('Creagmile'), ('KRKML', ''))
        self.assertEqual(self.pa.encode('Crew'), ('KR', 'KRF'))
        self.assertEqual(self.pa.encode('Crispin'), ('KRSPN', ''))
        self.assertEqual(self.pa.encode('Crocker'), ('KRKR', ''))
        self.assertEqual(self.pa.encode('Crockett'), ('KRKT', ''))
        self.assertEqual(self.pa.encode('Crosby'), ('KRSP', ''))
        self.assertEqual(self.pa.encode('Crump'), ('KRMP', ''))
        self.assertEqual(self.pa.encode('Cunningham'), ('KNNKM', ''))
        self.assertEqual(self.pa.encode('Curtis'), ('KRTS', ''))
        self.assertEqual(self.pa.encode('Cutha'), ('K0', 'KT'))
        self.assertEqual(self.pa.encode('Cutter'), ('KTR', ''))
        self.assertEqual(self.pa.encode('D\'Aubigny'), ('TPN', 'TPKN'))
        self.assertEqual(self.pa.encode('DAVIS'), ('TFS', ''))
        self.assertEqual(self.pa.encode('Dabinott'), ('TPNT', ''))
        self.assertEqual(self.pa.encode('Dacre'), ('TKR', ''))
        self.assertEqual(self.pa.encode('Daggett'), ('TKT', ''))
        self.assertEqual(self.pa.encode('Danvers'), ('TNFRS', ''))
        self.assertEqual(self.pa.encode('Darcy'), ('TRS', ''))
        self.assertEqual(self.pa.encode('Davis'), ('TFS', ''))
        self.assertEqual(self.pa.encode('Dawn'), ('TN', ''))
        self.assertEqual(self.pa.encode('Dawson'), ('TSN', ''))
        self.assertEqual(self.pa.encode('Day'), ('T', ''))
        self.assertEqual(self.pa.encode('Daye'), ('T', ''))
        self.assertEqual(self.pa.encode('DeGrenier'), ('TKRN', 'TKRNR'))
        self.assertEqual(self.pa.encode('Dean'), ('TN', ''))
        self.assertEqual(self.pa.encode('Deekindaugh'), ('TKNT', ''))
        self.assertEqual(self.pa.encode('Dennis'), ('TNS', ''))
        self.assertEqual(self.pa.encode('Denny'), ('TN', ''))
        self.assertEqual(self.pa.encode('Denton'), ('TNTN', ''))
        self.assertEqual(self.pa.encode('Desborough'), ('TSPRF', ''))
        self.assertEqual(self.pa.encode('Despenser'), ('TSPNSR', ''))
        self.assertEqual(self.pa.encode('Deverill'), ('TFRL', ''))
        self.assertEqual(self.pa.encode('Devine'), ('TFN', ''))
        self.assertEqual(self.pa.encode('Dexter'), ('TKSTR', ''))
        self.assertEqual(self.pa.encode('Dillaway'), ('TL', ''))
        self.assertEqual(self.pa.encode('Dimmick'), ('TMK', ''))
        self.assertEqual(self.pa.encode('Dinan'), ('TNN', ''))
        self.assertEqual(self.pa.encode('Dix'), ('TKS', ''))
        self.assertEqual(self.pa.encode('Doggett'), ('TKT', ''))
        self.assertEqual(self.pa.encode('Donahue'), ('TNH', ''))
        self.assertEqual(self.pa.encode('Dorfman'), ('TRFMN', ''))
        self.assertEqual(self.pa.encode('Dorris'), ('TRS', ''))
        self.assertEqual(self.pa.encode('Dow'), ('T', 'TF'))
        self.assertEqual(self.pa.encode('Downey'), ('TN', ''))
        self.assertEqual(self.pa.encode('Downing'), ('TNNK', ''))
        self.assertEqual(self.pa.encode('Dowsett'), ('TST', ''))
        self.assertEqual(self.pa.encode('Duck?'), ('TK', ''))
        self.assertEqual(self.pa.encode('Dudley'), ('TTL', ''))
        self.assertEqual(self.pa.encode('Duffy'), ('TF', ''))
        self.assertEqual(self.pa.encode('Dunn'), ('TN', ''))
        self.assertEqual(self.pa.encode('Dunsterville'), ('TNSTRFL', ''))
        self.assertEqual(self.pa.encode('Durrant'), ('TRNT', ''))
        self.assertEqual(self.pa.encode('Durrin'), ('TRN', ''))
        self.assertEqual(self.pa.encode('Dustin'), ('TSTN', ''))
        self.assertEqual(self.pa.encode('Duston'), ('TSTN', ''))
        self.assertEqual(self.pa.encode('Eames'), ('AMS', ''))
        self.assertEqual(self.pa.encode('Early'), ('ARL', ''))
        self.assertEqual(self.pa.encode('Easty'), ('AST', ''))
        self.assertEqual(self.pa.encode('Ebbett'), ('APT', ''))
        self.assertEqual(self.pa.encode('Eberbach'), ('APRPK', ''))
        self.assertEqual(self.pa.encode('Eberhard'), ('APRRT', ''))
        self.assertEqual(self.pa.encode('Eddy'), ('AT', ''))
        self.assertEqual(self.pa.encode('Edenden'), ('ATNTN', ''))
        self.assertEqual(self.pa.encode('Edwards'), ('ATRTS', ''))
        self.assertEqual(self.pa.encode('Eglinton'), ('AKLNTN', 'ALNTN'))
        self.assertEqual(self.pa.encode('Eliot'), ('ALT', ''))
        self.assertEqual(self.pa.encode('Elizabeth'), ('ALSP0', 'ALSPT'))
        self.assertEqual(self.pa.encode('Ellis'), ('ALS', ''))
        self.assertEqual(self.pa.encode('Ellison'), ('ALSN', ''))
        self.assertEqual(self.pa.encode('Ellot'), ('ALT', ''))
        self.assertEqual(self.pa.encode('Elny'), ('ALN', ''))
        self.assertEqual(self.pa.encode('Elsner'), ('ALSNR', ''))
        self.assertEqual(self.pa.encode('Emerson'), ('AMRSN', ''))
        self.assertEqual(self.pa.encode('Empson'), ('AMPSN', ''))
        self.assertEqual(self.pa.encode('Est'), ('AST', ''))
        self.assertEqual(self.pa.encode('Estabrook'), ('ASTPRK', ''))
        self.assertEqual(self.pa.encode('Estes'), ('ASTS', ''))
        self.assertEqual(self.pa.encode('Estey'), ('AST', ''))
        self.assertEqual(self.pa.encode('Evans'), ('AFNS', ''))
        self.assertEqual(self.pa.encode('Fallowell'), ('FLL', ''))
        self.assertEqual(self.pa.encode('Farnsworth'), ('FRNSR0', 'FRNSRT'))
        self.assertEqual(self.pa.encode('Feake'), ('FK', ''))
        self.assertEqual(self.pa.encode('Feke'), ('FK', ''))
        self.assertEqual(self.pa.encode('Fellows'), ('FLS', ''))
        self.assertEqual(self.pa.encode('Fettiplace'), ('FTPLS', ''))
        self.assertEqual(self.pa.encode('Finney'), ('FN', ''))
        self.assertEqual(self.pa.encode('Fischer'), ('FXR', 'FSKR'))
        self.assertEqual(self.pa.encode('Fisher'), ('FXR', ''))
        self.assertEqual(self.pa.encode('Fisk'), ('FSK', ''))
        self.assertEqual(self.pa.encode('Fiske'), ('FSK', ''))
        self.assertEqual(self.pa.encode('Fletcher'), ('FLXR', ''))
        self.assertEqual(self.pa.encode('Folger'), ('FLKR', 'FLJR'))
        self.assertEqual(self.pa.encode('Foliot'), ('FLT', ''))
        self.assertEqual(self.pa.encode('Folyot'), ('FLT', ''))
        self.assertEqual(self.pa.encode('Fones'), ('FNS', ''))
        self.assertEqual(self.pa.encode('Fordham'), ('FRTM', ''))
        self.assertEqual(self.pa.encode('Forstner'), ('FRSTNR', ''))
        self.assertEqual(self.pa.encode('Fosten'), ('FSTN', ''))
        self.assertEqual(self.pa.encode('Foster'), ('FSTR', ''))
        self.assertEqual(self.pa.encode('Foulke'), ('FLK', ''))
        self.assertEqual(self.pa.encode('Fowler'), ('FLR', ''))
        self.assertEqual(self.pa.encode('Foxwell'), ('FKSL', ''))
        self.assertEqual(self.pa.encode('Fraley'), ('FRL', ''))
        self.assertEqual(self.pa.encode('Franceys'), ('FRNSS', ''))
        self.assertEqual(self.pa.encode('Franke'), ('FRNK', ''))
        self.assertEqual(self.pa.encode('Frascella'), ('FRSL', ''))
        self.assertEqual(self.pa.encode('Frazer'), ('FRSR', ''))
        self.assertEqual(self.pa.encode('Fredd'), ('FRT', ''))
        self.assertEqual(self.pa.encode('Freeman'), ('FRMN', ''))
        self.assertEqual(self.pa.encode('French'), ('FRNX', 'FRNK'))
        self.assertEqual(self.pa.encode('Freville'), ('FRFL', ''))
        self.assertEqual(self.pa.encode('Frey'), ('FR', ''))
        self.assertEqual(self.pa.encode('Frick'), ('FRK', ''))
        self.assertEqual(self.pa.encode('Frier'), ('FR', 'FRR'))
        self.assertEqual(self.pa.encode('Froe'), ('FR', ''))
        self.assertEqual(self.pa.encode('Frorer'), ('FRRR', ''))
        self.assertEqual(self.pa.encode('Frost'), ('FRST', ''))
        self.assertEqual(self.pa.encode('Frothingham'), ('FR0NKM', 'FRTNKM'))
        self.assertEqual(self.pa.encode('Fry'), ('FR', ''))
        self.assertEqual(self.pa.encode('Gaffney'), ('KFN', ''))
        self.assertEqual(self.pa.encode('Gage'), ('KJ', 'KK'))
        self.assertEqual(self.pa.encode('Gallion'), ('KLN', ''))
        self.assertEqual(self.pa.encode('Gallishan'), ('KLXN', ''))
        self.assertEqual(self.pa.encode('Gamble'), ('KMPL', ''))
        self.assertEqual(self.pa.encode('Garbrand'), ('KRPRNT', ''))
        self.assertEqual(self.pa.encode('Gardner'), ('KRTNR', ''))
        self.assertEqual(self.pa.encode('Garrett'), ('KRT', ''))
        self.assertEqual(self.pa.encode('Gassner'), ('KSNR', ''))
        self.assertEqual(self.pa.encode('Gater'), ('KTR', ''))
        self.assertEqual(self.pa.encode('Gaunt'), ('KNT', ''))
        self.assertEqual(self.pa.encode('Gayer'), ('KR', ''))
        self.assertEqual(self.pa.encode('Gerken'), ('KRKN', 'JRKN'))
        self.assertEqual(self.pa.encode('Gerritsen'), ('KRTSN', 'JRTSN'))
        self.assertEqual(self.pa.encode('Gibbs'), ('KPS', 'JPS'))
        self.assertEqual(self.pa.encode('Giffard'), ('JFRT', 'KFRT'))
        self.assertEqual(self.pa.encode('Gilbert'), ('KLPRT', 'JLPRT'))
        self.assertEqual(self.pa.encode('Gill'), ('KL', 'JL'))
        self.assertEqual(self.pa.encode('Gilman'), ('KLMN', 'JLMN'))
        self.assertEqual(self.pa.encode('Glass'), ('KLS', ''))
        self.assertEqual(self.pa.encode('GoddardGifford'), ('KTRJFRT', ''))
        self.assertEqual(self.pa.encode('Godfrey'), ('KTFR', ''))
        self.assertEqual(self.pa.encode('Godwin'), ('KTN', ''))
        self.assertEqual(self.pa.encode('Goodale'), ('KTL', ''))
        self.assertEqual(self.pa.encode('Goodnow'), ('KTN', 'KTNF'))
        self.assertEqual(self.pa.encode('Gorham'), ('KRM', ''))
        self.assertEqual(self.pa.encode('Goseline'), ('KSLN', ''))
        self.assertEqual(self.pa.encode('Gott'), ('KT', ''))
        self.assertEqual(self.pa.encode('Gould'), ('KLT', ''))
        self.assertEqual(self.pa.encode('Grafton'), ('KRFTN', ''))
        self.assertEqual(self.pa.encode('Grant'), ('KRNT', ''))
        self.assertEqual(self.pa.encode('Gray'), ('KR', ''))
        self.assertEqual(self.pa.encode('Green'), ('KRN', ''))
        self.assertEqual(self.pa.encode('Griffin'), ('KRFN', ''))
        self.assertEqual(self.pa.encode('Grill'), ('KRL', ''))
        self.assertEqual(self.pa.encode('Grim'), ('KRM', ''))
        self.assertEqual(self.pa.encode('Grisgonelle'), ('KRSKNL', ''))
        self.assertEqual(self.pa.encode('Gross'), ('KRS', ''))
        self.assertEqual(self.pa.encode('Guba'), ('KP', ''))
        self.assertEqual(self.pa.encode('Gybbes'), ('KPS', 'JPS'))
        self.assertEqual(self.pa.encode('Haburne'), ('HPRN', ''))
        self.assertEqual(self.pa.encode('Hackburne'), ('HKPRN', ''))
        self.assertEqual(self.pa.encode('Haddon?'), ('HTN', ''))
        self.assertEqual(self.pa.encode('Haines'), ('HNS', ''))
        self.assertEqual(self.pa.encode('Hale'), ('HL', ''))
        self.assertEqual(self.pa.encode('Hall'), ('HL', ''))
        self.assertEqual(self.pa.encode('Hallet'), ('HLT', ''))
        self.assertEqual(self.pa.encode('Hallock'), ('HLK', ''))
        self.assertEqual(self.pa.encode('Halstead'), ('HLSTT', ''))
        self.assertEqual(self.pa.encode('Hammond'), ('HMNT', ''))
        self.assertEqual(self.pa.encode('Hance'), ('HNS', ''))
        self.assertEqual(self.pa.encode('Handy'), ('HNT', ''))
        self.assertEqual(self.pa.encode('Hanson'), ('HNSN', ''))
        self.assertEqual(self.pa.encode('Harasek'), ('HRSK', ''))
        self.assertEqual(self.pa.encode('Harcourt'), ('HRKRT', ''))
        self.assertEqual(self.pa.encode('Hardy'), ('HRT', ''))
        self.assertEqual(self.pa.encode('Harlock'), ('HRLK', ''))
        self.assertEqual(self.pa.encode('Harris'), ('HRS', ''))
        self.assertEqual(self.pa.encode('Hartley'), ('HRTL', ''))
        self.assertEqual(self.pa.encode('Harvey'), ('HRF', ''))
        self.assertEqual(self.pa.encode('Harvie'), ('HRF', ''))
        self.assertEqual(self.pa.encode('Harwood'), ('HRT', ''))
        self.assertEqual(self.pa.encode('Hathaway'), ('H0', 'HT'))
        self.assertEqual(self.pa.encode('Haukeness'), ('HKNS', ''))
        self.assertEqual(self.pa.encode('Hawkes'), ('HKS', ''))
        self.assertEqual(self.pa.encode('Hawkhurst'), ('HKRST', ''))
        self.assertEqual(self.pa.encode('Hawkins'), ('HKNS', ''))
        self.assertEqual(self.pa.encode('Hawley'), ('HL', ''))
        self.assertEqual(self.pa.encode('Heald'), ('HLT', ''))
        self.assertEqual(self.pa.encode('Helsdon'), ('HLSTN', ''))
        self.assertEqual(self.pa.encode('Hemenway'), ('HMN', ''))
        self.assertEqual(self.pa.encode('Hemmenway'), ('HMN', ''))
        self.assertEqual(self.pa.encode('Henck'), ('HNK', ''))
        self.assertEqual(self.pa.encode('Henderson'), ('HNTRSN', ''))
        self.assertEqual(self.pa.encode('Hendricks'), ('HNTRKS', ''))
        self.assertEqual(self.pa.encode('Hersey'), ('HRS', ''))
        self.assertEqual(self.pa.encode('Hewes'), ('HS', ''))
        self.assertEqual(self.pa.encode('Heyman'), ('HMN', ''))
        self.assertEqual(self.pa.encode('Hicks'), ('HKS', ''))
        self.assertEqual(self.pa.encode('Hidden'), ('HTN', ''))
        self.assertEqual(self.pa.encode('Higgs'), ('HKS', ''))
        self.assertEqual(self.pa.encode('Hill'), ('HL', ''))
        self.assertEqual(self.pa.encode('Hills'), ('HLS', ''))
        self.assertEqual(self.pa.encode('Hinckley'), ('HNKL', ''))
        self.assertEqual(self.pa.encode('Hipwell'), ('HPL', ''))
        self.assertEqual(self.pa.encode('Hobart'), ('HPRT', ''))
        self.assertEqual(self.pa.encode('Hoben'), ('HPN', ''))
        self.assertEqual(self.pa.encode('Hoffmann'), ('HFMN', ''))
        self.assertEqual(self.pa.encode('Hogan'), ('HKN', ''))
        self.assertEqual(self.pa.encode('Holmes'), ('HLMS', ''))
        self.assertEqual(self.pa.encode('Hoo'), ('H', ''))
        self.assertEqual(self.pa.encode('Hooker'), ('HKR', ''))
        self.assertEqual(self.pa.encode('Hopcott'), ('HPKT', ''))
        self.assertEqual(self.pa.encode('Hopkins'), ('HPKNS', ''))
        self.assertEqual(self.pa.encode('Hopkinson'), ('HPKNSN', ''))
        self.assertEqual(self.pa.encode('Hornsey'), ('HRNS', ''))
        self.assertEqual(self.pa.encode('Houckgeest'), ('HKJST', 'HKKST'))
        self.assertEqual(self.pa.encode('Hough'), ('H', ''))
        self.assertEqual(self.pa.encode('Houstin'), ('HSTN', ''))
        self.assertEqual(self.pa.encode('How'), ('H', 'HF'))
        self.assertEqual(self.pa.encode('Howe'), ('H', ''))
        self.assertEqual(self.pa.encode('Howland'), ('HLNT', ''))
        self.assertEqual(self.pa.encode('Hubner'), ('HPNR', ''))
        self.assertEqual(self.pa.encode('Hudnut'), ('HTNT', ''))
        self.assertEqual(self.pa.encode('Hughes'), ('HS', ''))
        self.assertEqual(self.pa.encode('Hull'), ('HL', ''))
        self.assertEqual(self.pa.encode('Hulme'), ('HLM', ''))
        self.assertEqual(self.pa.encode('Hume'), ('HM', ''))
        self.assertEqual(self.pa.encode('Hundertumark'), ('HNTRTMRK', ''))
        self.assertEqual(self.pa.encode('Hundley'), ('HNTL', ''))
        self.assertEqual(self.pa.encode('Hungerford'), ('HNKRFRT', 'HNJRFRT'))
        self.assertEqual(self.pa.encode('Hunt'), ('HNT', ''))
        self.assertEqual(self.pa.encode('Hurst'), ('HRST', ''))
        self.assertEqual(self.pa.encode('Husbands'), ('HSPNTS', ''))
        self.assertEqual(self.pa.encode('Hussey'), ('HS', ''))
        self.assertEqual(self.pa.encode('Husted'), ('HSTT', ''))
        self.assertEqual(self.pa.encode('Hutchins'), ('HXNS', ''))
        self.assertEqual(self.pa.encode('Hutchinson'), ('HXNSN', ''))
        self.assertEqual(self.pa.encode('Huttinger'), ('HTNKR', 'HTNJR'))
        self.assertEqual(self.pa.encode('Huybertsen'), ('HPRTSN', ''))
        self.assertEqual(self.pa.encode('Iddenden'), ('ATNTN', ''))
        self.assertEqual(self.pa.encode('Ingraham'), ('ANKRHM', ''))
        self.assertEqual(self.pa.encode('Ives'), ('AFS', ''))
        self.assertEqual(self.pa.encode('Jackson'), ('JKSN', 'AKSN'))
        self.assertEqual(self.pa.encode('Jacob'), ('JKP', 'AKP'))
        self.assertEqual(self.pa.encode('Jans'), ('JNS', 'ANS'))
        self.assertEqual(self.pa.encode('Jenkins'), ('JNKNS', 'ANKNS'))
        self.assertEqual(self.pa.encode('Jewett'), ('JT', 'AT'))
        self.assertEqual(self.pa.encode('Jewitt'), ('JT', 'AT'))
        self.assertEqual(self.pa.encode('Johnson'), ('JNSN', 'ANSN'))
        self.assertEqual(self.pa.encode('Jones'), ('JNS', 'ANS'))
        self.assertEqual(self.pa.encode('Josephine'), ('JSFN', 'HSFN'))
        self.assertEqual(self.pa.encode('Judd'), ('JT', 'AT'))
        self.assertEqual(self.pa.encode('June'), ('JN', 'AN'))
        self.assertEqual(self.pa.encode('Kamarowska'), ('KMRSK', ''))
        self.assertEqual(self.pa.encode('Kay'), ('K', ''))
        self.assertEqual(self.pa.encode('Kelley'), ('KL', ''))
        self.assertEqual(self.pa.encode('Kelly'), ('KL', ''))
        self.assertEqual(self.pa.encode('Keymber'), ('KMPR', ''))
        self.assertEqual(self.pa.encode('Keynes'), ('KNS', ''))
        self.assertEqual(self.pa.encode('Kilham'), ('KLM', ''))
        self.assertEqual(self.pa.encode('Kim'), ('KM', ''))
        self.assertEqual(self.pa.encode('Kimball'), ('KMPL', ''))
        self.assertEqual(self.pa.encode('King'), ('KNK', ''))
        self.assertEqual(self.pa.encode('Kinsey'), ('KNS', ''))
        self.assertEqual(self.pa.encode('Kirk'), ('KRK', ''))
        self.assertEqual(self.pa.encode('Kirton'), ('KRTN', ''))
        self.assertEqual(self.pa.encode('Kistler'), ('KSTLR', ''))
        self.assertEqual(self.pa.encode('Kitchen'), ('KXN', ''))
        self.assertEqual(self.pa.encode('Kitson'), ('KTSN', ''))
        self.assertEqual(self.pa.encode('Klett'), ('KLT', ''))
        self.assertEqual(self.pa.encode('Kline'), ('KLN', ''))
        self.assertEqual(self.pa.encode('Knapp'), ('NP', ''))
        self.assertEqual(self.pa.encode('Knight'), ('NT', ''))
        self.assertEqual(self.pa.encode('Knote'), ('NT', ''))
        self.assertEqual(self.pa.encode('Knott'), ('NT', ''))
        self.assertEqual(self.pa.encode('Knox'), ('NKS', ''))
        self.assertEqual(self.pa.encode('Koeller'), ('KLR', ''))
        self.assertEqual(self.pa.encode('La Pointe'), ('LPNT', ''))
        self.assertEqual(self.pa.encode('LaPlante'), ('LPLNT', ''))
        self.assertEqual(self.pa.encode('Laimbeer'), ('LMPR', ''))
        self.assertEqual(self.pa.encode('Lamb'), ('LMP', ''))
        self.assertEqual(self.pa.encode('Lambertson'), ('LMPRTSN', ''))
        self.assertEqual(self.pa.encode('Lancto'), ('LNKT', ''))
        self.assertEqual(self.pa.encode('Landry'), ('LNTR', ''))
        self.assertEqual(self.pa.encode('Lane'), ('LN', ''))
        self.assertEqual(self.pa.encode('Langendyck'), ('LNJNTK', 'LNKNTK'))
        self.assertEqual(self.pa.encode('Langer'), ('LNKR', 'LNJR'))
        self.assertEqual(self.pa.encode('Langford'), ('LNKFRT', ''))
        self.assertEqual(self.pa.encode('Lantersee'), ('LNTRS', ''))
        self.assertEqual(self.pa.encode('Laquer'), ('LKR', ''))
        self.assertEqual(self.pa.encode('Larkin'), ('LRKN', ''))
        self.assertEqual(self.pa.encode('Latham'), ('LTM', ''))
        self.assertEqual(self.pa.encode('Lathrop'), ('L0RP', 'LTRP'))
        self.assertEqual(self.pa.encode('Lauter'), ('LTR', ''))
        self.assertEqual(self.pa.encode('Lawrence'), ('LRNS', ''))
        self.assertEqual(self.pa.encode('Leach'), ('LK', ''))
        self.assertEqual(self.pa.encode('Leager'), ('LKR', 'LJR'))
        self.assertEqual(self.pa.encode('Learned'), ('LRNT', ''))
        self.assertEqual(self.pa.encode('Leavitt'), ('LFT', ''))
        self.assertEqual(self.pa.encode('Lee'), ('L', ''))
        self.assertEqual(self.pa.encode('Leete'), ('LT', ''))
        self.assertEqual(self.pa.encode('Leggett'), ('LKT', ''))
        self.assertEqual(self.pa.encode('Leland'), ('LLNT', ''))
        self.assertEqual(self.pa.encode('Leonard'), ('LNRT', ''))
        self.assertEqual(self.pa.encode('Lester'), ('LSTR', ''))
        self.assertEqual(self.pa.encode('Lestrange'), ('LSTRNJ', 'LSTRNK'))
        self.assertEqual(self.pa.encode('Lethem'), ('L0M', 'LTM'))
        self.assertEqual(self.pa.encode('Levine'), ('LFN', ''))
        self.assertEqual(self.pa.encode('Lewes'), ('LS', ''))
        self.assertEqual(self.pa.encode('Lewis'), ('LS', ''))
        self.assertEqual(self.pa.encode('Lincoln'), ('LNKLN', ''))
        self.assertEqual(self.pa.encode('Lindsey'), ('LNTS', ''))
        self.assertEqual(self.pa.encode('Linher'), ('LNR', ''))
        self.assertEqual(self.pa.encode('Lippet'), ('LPT', ''))
        self.assertEqual(self.pa.encode('Lippincott'), ('LPNKT', ''))
        self.assertEqual(self.pa.encode('Lockwood'), ('LKT', ''))
        self.assertEqual(self.pa.encode('Loines'), ('LNS', ''))
        self.assertEqual(self.pa.encode('Lombard'), ('LMPRT', ''))
        self.assertEqual(self.pa.encode('Long'), ('LNK', ''))
        self.assertEqual(self.pa.encode('Longespee'), ('LNJSP', 'LNKSP'))
        self.assertEqual(self.pa.encode('Look'), ('LK', ''))
        self.assertEqual(self.pa.encode('Lounsberry'), ('LNSPR', ''))
        self.assertEqual(self.pa.encode('Lounsbury'), ('LNSPR', ''))
        self.assertEqual(self.pa.encode('Louthe'), ('L0', 'LT'))
        self.assertEqual(self.pa.encode('Loveyne'), ('LFN', ''))
        self.assertEqual(self.pa.encode('Lowe'), ('L', ''))
        self.assertEqual(self.pa.encode('Ludlam'), ('LTLM', ''))
        self.assertEqual(self.pa.encode('Lumbard'), ('LMPRT', ''))
        self.assertEqual(self.pa.encode('Lund'), ('LNT', ''))
        self.assertEqual(self.pa.encode('Luno'), ('LN', ''))
        self.assertEqual(self.pa.encode('Lutz'), ('LTS', ''))
        self.assertEqual(self.pa.encode('Lydia'), ('LT', ''))
        self.assertEqual(self.pa.encode('Lynne'), ('LN', ''))
        self.assertEqual(self.pa.encode('Lyon'), ('LN', ''))
        self.assertEqual(self.pa.encode('MacAlpin'), ('MKLPN', ''))
        self.assertEqual(self.pa.encode('MacBricc'), ('MKPRK', ''))
        self.assertEqual(self.pa.encode('MacCrinan'), ('MKRNN', ''))
        self.assertEqual(self.pa.encode('MacKenneth'), ('MKN0', 'MKNT'))
        self.assertEqual(self.pa.encode('MacMael nam Bo'), ('MKMLNMP', ''))
        self.assertEqual(self.pa.encode('MacMurchada'), ('MKMRXT', 'MKMRKT'))
        self.assertEqual(self.pa.encode('Macomber'), ('MKMPR', ''))
        self.assertEqual(self.pa.encode('Macy'), ('MS', ''))
        self.assertEqual(self.pa.encode('Magnus'), ('MNS', 'MKNS'))
        self.assertEqual(self.pa.encode('Mahien'), ('MHN', ''))
        self.assertEqual(self.pa.encode('Malmains'), ('MLMNS', ''))
        self.assertEqual(self.pa.encode('Malory'), ('MLR', ''))
        self.assertEqual(self.pa.encode('Mancinelli'), ('MNSNL', ''))
        self.assertEqual(self.pa.encode('Mancini'), ('MNSN', ''))
        self.assertEqual(self.pa.encode('Mann'), ('MN', ''))
        self.assertEqual(self.pa.encode('Manning'), ('MNNK', ''))
        self.assertEqual(self.pa.encode('Manter'), ('MNTR', ''))
        self.assertEqual(self.pa.encode('Marion'), ('MRN', ''))
        self.assertEqual(self.pa.encode('Marley'), ('MRL', ''))
        self.assertEqual(self.pa.encode('Marmion'), ('MRMN', ''))
        self.assertEqual(self.pa.encode('Marquart'), ('MRKRT', ''))
        self.assertEqual(self.pa.encode('Marsh'), ('MRX', ''))
        self.assertEqual(self.pa.encode('Marshal'), ('MRXL', ''))
        self.assertEqual(self.pa.encode('Marshall'), ('MRXL', ''))
        self.assertEqual(self.pa.encode('Martel'), ('MRTL', ''))
        self.assertEqual(self.pa.encode('Martha'), ('MR0', 'MRT'))
        self.assertEqual(self.pa.encode('Martin'), ('MRTN', ''))
        self.assertEqual(self.pa.encode('Marturano'), ('MRTRN', ''))
        self.assertEqual(self.pa.encode('Marvin'), ('MRFN', ''))
        self.assertEqual(self.pa.encode('Mary'), ('MR', ''))
        self.assertEqual(self.pa.encode('Mason'), ('MSN', ''))
        self.assertEqual(self.pa.encode('Maxwell'), ('MKSL', ''))
        self.assertEqual(self.pa.encode('Mayhew'), ('MH', 'MHF'))
        self.assertEqual(self.pa.encode('McAllaster'), ('MKLSTR', ''))
        self.assertEqual(self.pa.encode('McAllister'), ('MKLSTR', ''))
        self.assertEqual(self.pa.encode('McConnell'), ('MKNL', ''))
        self.assertEqual(self.pa.encode('McFarland'), ('MKFRLNT', ''))
        self.assertEqual(self.pa.encode('McIlroy'), ('MSLR', ''))
        self.assertEqual(self.pa.encode('McNair'), ('MKNR', ''))
        self.assertEqual(self.pa.encode('McNair-Landry'), ('MKNRLNTR', ''))
        self.assertEqual(self.pa.encode('McRaven'), ('MKRFN', ''))
        self.assertEqual(self.pa.encode('Mead'), ('MT', ''))
        self.assertEqual(self.pa.encode('Meade'), ('MT', ''))
        self.assertEqual(self.pa.encode('Meck'), ('MK', ''))
        self.assertEqual(self.pa.encode('Melton'), ('MLTN', ''))
        self.assertEqual(self.pa.encode('Mendenhall'), ('MNTNL', ''))
        self.assertEqual(self.pa.encode('Mering'), ('MRNK', ''))
        self.assertEqual(self.pa.encode('Merrick'), ('MRK', ''))
        self.assertEqual(self.pa.encode('Merry'), ('MR', ''))
        self.assertEqual(self.pa.encode('Mighill'), ('ML', ''))
        self.assertEqual(self.pa.encode('Miller'), ('MLR', ''))
        self.assertEqual(self.pa.encode('Milton'), ('MLTN', ''))
        self.assertEqual(self.pa.encode('Mohun'), ('MHN', ''))
        self.assertEqual(self.pa.encode('Montague'), ('MNTK', ''))
        self.assertEqual(self.pa.encode('Montboucher'), ('MNTPXR', 'MNTPKR'))
        self.assertEqual(self.pa.encode('Moore'), ('MR', ''))
        self.assertEqual(self.pa.encode('Morrel'), ('MRL', ''))
        self.assertEqual(self.pa.encode('Morrill'), ('MRL', ''))
        self.assertEqual(self.pa.encode('Morris'), ('MRS', ''))
        self.assertEqual(self.pa.encode('Morton'), ('MRTN', ''))
        self.assertEqual(self.pa.encode('Moton'), ('MTN', ''))
        self.assertEqual(self.pa.encode('Muir'), ('MR', ''))
        self.assertEqual(self.pa.encode('Mulferd'), ('MLFRT', ''))
        self.assertEqual(self.pa.encode('Mullins'), ('MLNS', ''))
        self.assertEqual(self.pa.encode('Mulso'), ('MLS', ''))
        self.assertEqual(self.pa.encode('Munger'), ('MNKR', 'MNJR'))
        self.assertEqual(self.pa.encode('Munt'), ('MNT', ''))
        self.assertEqual(self.pa.encode('Murchad'), ('MRXT', 'MRKT'))
        self.assertEqual(self.pa.encode('Murdock'), ('MRTK', ''))
        self.assertEqual(self.pa.encode('Murray'), ('MR', ''))
        self.assertEqual(self.pa.encode('Muskett'), ('MSKT', ''))
        self.assertEqual(self.pa.encode('Myers'), ('MRS', ''))
        self.assertEqual(self.pa.encode('Myrick'), ('MRK', ''))
        self.assertEqual(self.pa.encode('NORRIS'), ('NRS', ''))
        self.assertEqual(self.pa.encode('Nayle'), ('NL', ''))
        self.assertEqual(self.pa.encode('Newcomb'), ('NKMP', ''))
        self.assertEqual(self.pa.encode('Newcomb(e)'), ('NKMP', ''))
        self.assertEqual(self.pa.encode('Newkirk'), ('NKRK', ''))
        self.assertEqual(self.pa.encode('Newton'), ('NTN', ''))
        self.assertEqual(self.pa.encode('Niles'), ('NLS', ''))
        self.assertEqual(self.pa.encode('Noble'), ('NPL', ''))
        self.assertEqual(self.pa.encode('Noel'), ('NL', ''))
        self.assertEqual(self.pa.encode('Northend'), ('NR0NT', 'NRTNT'))
        self.assertEqual(self.pa.encode('Norton'), ('NRTN', ''))
        self.assertEqual(self.pa.encode('Nutter'), ('NTR', ''))
        self.assertEqual(self.pa.encode('Odding'), ('ATNK', ''))
        self.assertEqual(self.pa.encode('Odenbaugh'), ('ATNP', ''))
        self.assertEqual(self.pa.encode('Ogborn'), ('AKPRN', ''))
        self.assertEqual(self.pa.encode('Oppenheimer'), ('APNMR', ''))
        self.assertEqual(self.pa.encode('Otis'), ('ATS', ''))
        self.assertEqual(self.pa.encode('Oviatt'), ('AFT', ''))
        self.assertEqual(self.pa.encode('PRUST?'), ('PRST', ''))
        self.assertEqual(self.pa.encode('Paddock'), ('PTK', ''))
        self.assertEqual(self.pa.encode('Page'), ('PJ', 'PK'))
        self.assertEqual(self.pa.encode('Paine'), ('PN', ''))
        self.assertEqual(self.pa.encode('Paist'), ('PST', ''))
        self.assertEqual(self.pa.encode('Palmer'), ('PLMR', ''))
        self.assertEqual(self.pa.encode('Park'), ('PRK', ''))
        self.assertEqual(self.pa.encode('Parker'), ('PRKR', ''))
        self.assertEqual(self.pa.encode('Parkhurst'), ('PRKRST', ''))
        self.assertEqual(self.pa.encode('Parrat'), ('PRT', ''))
        self.assertEqual(self.pa.encode('Parsons'), ('PRSNS', ''))
        self.assertEqual(self.pa.encode('Partridge'), ('PRTRJ', ''))
        self.assertEqual(self.pa.encode('Pashley'), ('PXL', ''))
        self.assertEqual(self.pa.encode('Pasley'), ('PSL', ''))
        self.assertEqual(self.pa.encode('Patrick'), ('PTRK', ''))
        self.assertEqual(self.pa.encode('Pattee'), ('PT', ''))
        self.assertEqual(self.pa.encode('Patten'), ('PTN', ''))
        self.assertEqual(self.pa.encode('Pawley'), ('PL', ''))
        self.assertEqual(self.pa.encode('Payne'), ('PN', ''))
        self.assertEqual(self.pa.encode('Peabody'), ('PPT', ''))
        self.assertEqual(self.pa.encode('Peake'), ('PK', ''))
        self.assertEqual(self.pa.encode('Pearson'), ('PRSN', ''))
        self.assertEqual(self.pa.encode('Peat'), ('PT', ''))
        self.assertEqual(self.pa.encode('Pedersen'), ('PTRSN', ''))
        self.assertEqual(self.pa.encode('Percy'), ('PRS', ''))
        self.assertEqual(self.pa.encode('Perkins'), ('PRKNS', ''))
        self.assertEqual(self.pa.encode('Perrine'), ('PRN', ''))
        self.assertEqual(self.pa.encode('Perry'), ('PR', ''))
        self.assertEqual(self.pa.encode('Peson'), ('PSN', ''))
        self.assertEqual(self.pa.encode('Peterson'), ('PTRSN', ''))
        self.assertEqual(self.pa.encode('Peyton'), ('PTN', ''))
        self.assertEqual(self.pa.encode('Phinney'), ('FN', ''))
        self.assertEqual(self.pa.encode('Pickard'), ('PKRT', ''))
        self.assertEqual(self.pa.encode('Pierce'), ('PRS', ''))
        self.assertEqual(self.pa.encode('Pierrepont'), ('PRPNT', ''))
        self.assertEqual(self.pa.encode('Pike'), ('PK', ''))
        self.assertEqual(self.pa.encode('Pinkham'), ('PNKM', ''))
        self.assertEqual(self.pa.encode('Pitman'), ('PTMN', ''))
        self.assertEqual(self.pa.encode('Pitt'), ('PT', ''))
        self.assertEqual(self.pa.encode('Pitts'), ('PTS', ''))
        self.assertEqual(self.pa.encode('Plantagenet'), ('PLNTJNT', 'PLNTKNT'))
        self.assertEqual(self.pa.encode('Platt'), ('PLT', ''))
        self.assertEqual(self.pa.encode('Platts'), ('PLTS', ''))
        self.assertEqual(self.pa.encode('Pleis'), ('PLS', ''))
        self.assertEqual(self.pa.encode('Pleiss'), ('PLS', ''))
        self.assertEqual(self.pa.encode('Plisko'), ('PLSK', ''))
        self.assertEqual(self.pa.encode('Pliskovitch'), ('PLSKFX', ''))
        self.assertEqual(self.pa.encode('Plum'), ('PLM', ''))
        self.assertEqual(self.pa.encode('Plume'), ('PLM', ''))
        self.assertEqual(self.pa.encode('Poitou'), ('PT', ''))
        self.assertEqual(self.pa.encode('Pomeroy'), ('PMR', ''))
        self.assertEqual(self.pa.encode('Poretiers'), ('PRTRS', ''))
        self.assertEqual(self.pa.encode('Pote'), ('PT', ''))
        self.assertEqual(self.pa.encode('Potter'), ('PTR', ''))
        self.assertEqual(self.pa.encode('Potts'), ('PTS', ''))
        self.assertEqual(self.pa.encode('Powell'), ('PL', ''))
        self.assertEqual(self.pa.encode('Pratt'), ('PRT', ''))
        self.assertEqual(self.pa.encode('Presbury'), ('PRSPR', ''))
        self.assertEqual(self.pa.encode('Priest'), ('PRST', ''))
        self.assertEqual(self.pa.encode('Prindle'), ('PRNTL', ''))
        self.assertEqual(self.pa.encode('Prior'), ('PRR', ''))
        self.assertEqual(self.pa.encode('Profumo'), ('PRFM', ''))
        self.assertEqual(self.pa.encode('Purdy'), ('PRT', ''))
        self.assertEqual(self.pa.encode('Purefoy'), ('PRF', ''))
        self.assertEqual(self.pa.encode('Pury'), ('PR', ''))
        self.assertEqual(self.pa.encode('Quinter'), ('KNTR', ''))
        self.assertEqual(self.pa.encode('Rachel'), ('RXL', 'RKL'))
        self.assertEqual(self.pa.encode('Rand'), ('RNT', ''))
        self.assertEqual(self.pa.encode('Rankin'), ('RNKN', ''))
        self.assertEqual(self.pa.encode('Ravenscroft'), ('RFNSKFT', ''))
        self.assertEqual(self.pa.encode('Raynsford'), ('RNSFRT', ''))
        self.assertEqual(self.pa.encode('Reakirt'), ('RKRT', ''))
        self.assertEqual(self.pa.encode('Reaves'), ('RFS', ''))
        self.assertEqual(self.pa.encode('Reeves'), ('RFS', ''))
        self.assertEqual(self.pa.encode('Reichert'), ('RXRT', 'RKRT'))
        self.assertEqual(self.pa.encode('Remmele'), ('RML', ''))
        self.assertEqual(self.pa.encode('Reynolds'), ('RNLTS', ''))
        self.assertEqual(self.pa.encode('Rhodes'), ('RTS', ''))
        self.assertEqual(self.pa.encode('Richards'), ('RXRTS', 'RKRTS'))
        self.assertEqual(self.pa.encode('Richardson'), ('RXRTSN', 'RKRTSN'))
        self.assertEqual(self.pa.encode('Ring'), ('RNK', ''))
        self.assertEqual(self.pa.encode('Roberts'), ('RPRTS', ''))
        self.assertEqual(self.pa.encode('Robertson'), ('RPRTSN', ''))
        self.assertEqual(self.pa.encode('Robson'), ('RPSN', ''))
        self.assertEqual(self.pa.encode('Rodie'), ('RT', ''))
        self.assertEqual(self.pa.encode('Rody'), ('RT', ''))
        self.assertEqual(self.pa.encode('Rogers'), ('RKRS', 'RJRS'))
        self.assertEqual(self.pa.encode('Ross'), ('RS', ''))
        self.assertEqual(self.pa.encode('Rosslevin'), ('RSLFN', ''))
        self.assertEqual(self.pa.encode('Rowland'), ('RLNT', ''))
        self.assertEqual(self.pa.encode('Ruehl'), ('RL', ''))
        self.assertEqual(self.pa.encode('Russell'), ('RSL', ''))
        self.assertEqual(self.pa.encode('Ruth'), ('R0', 'RT'))
        self.assertEqual(self.pa.encode('Ryan'), ('RN', ''))
        self.assertEqual(self.pa.encode('Rysse'), ('RS', ''))
        self.assertEqual(self.pa.encode('Sadler'), ('STLR', ''))
        self.assertEqual(self.pa.encode('Salmon'), ('SLMN', ''))
        self.assertEqual(self.pa.encode('Salter'), ('SLTR', ''))
        self.assertEqual(self.pa.encode('Salvatore'), ('SLFTR', ''))
        self.assertEqual(self.pa.encode('Sanders'), ('SNTRS', ''))
        self.assertEqual(self.pa.encode('Sands'), ('SNTS', ''))
        self.assertEqual(self.pa.encode('Sanford'), ('SNFRT', ''))
        self.assertEqual(self.pa.encode('Sanger'), ('SNKR', 'SNJR'))
        self.assertEqual(self.pa.encode('Sargent'), ('SRJNT', 'SRKNT'))
        self.assertEqual(self.pa.encode('Saunders'), ('SNTRS', ''))
        self.assertEqual(self.pa.encode('Schilling'), ('XLNK', ''))
        self.assertEqual(self.pa.encode('Schlegel'), ('XLKL', 'SLKL'))
        self.assertEqual(self.pa.encode('Scott'), ('SKT', ''))
        self.assertEqual(self.pa.encode('Sears'), ('SRS', ''))
        self.assertEqual(self.pa.encode('Segersall'), ('SJRSL', 'SKRSL'))
        self.assertEqual(self.pa.encode('Senecal'), ('SNKL', ''))
        self.assertEqual(self.pa.encode('Sergeaux'), ('SRJ', 'SRK'))
        self.assertEqual(self.pa.encode('Severance'), ('SFRNS', ''))
        self.assertEqual(self.pa.encode('Sharp'), ('XRP', ''))
        self.assertEqual(self.pa.encode('Sharpe'), ('XRP', ''))
        self.assertEqual(self.pa.encode('Sharply'), ('XRPL', ''))
        self.assertEqual(self.pa.encode('Shatswell'), ('XTSL', ''))
        self.assertEqual(self.pa.encode('Shattack'), ('XTK', ''))
        self.assertEqual(self.pa.encode('Shattock'), ('XTK', ''))
        self.assertEqual(self.pa.encode('Shattuck'), ('XTK', ''))
        self.assertEqual(self.pa.encode('Shaw'), ('X', 'XF'))
        self.assertEqual(self.pa.encode('Sheldon'), ('XLTN', ''))
        self.assertEqual(self.pa.encode('Sherman'), ('XRMN', ''))
        self.assertEqual(self.pa.encode('Shinn'), ('XN', ''))
        self.assertEqual(self.pa.encode('Shirford'), ('XRFRT', ''))
        self.assertEqual(self.pa.encode('Shirley'), ('XRL', ''))
        self.assertEqual(self.pa.encode('Shively'), ('XFL', ''))
        self.assertEqual(self.pa.encode('Shoemaker'), ('XMKR', ''))
        self.assertEqual(self.pa.encode('Short'), ('XRT', ''))
        self.assertEqual(self.pa.encode('Shotwell'), ('XTL', ''))
        self.assertEqual(self.pa.encode('Shute'), ('XT', ''))
        self.assertEqual(self.pa.encode('Sibley'), ('SPL', ''))
        self.assertEqual(self.pa.encode('Silver'), ('SLFR', ''))
        self.assertEqual(self.pa.encode('Simes'), ('SMS', ''))
        self.assertEqual(self.pa.encode('Sinken'), ('SNKN', ''))
        self.assertEqual(self.pa.encode('Sinn'), ('SN', ''))
        self.assertEqual(self.pa.encode('Skelton'), ('SKLTN', ''))
        self.assertEqual(self.pa.encode('Skiffe'), ('SKF', ''))
        self.assertEqual(self.pa.encode('Skotkonung'), ('SKTKNNK', ''))
        self.assertEqual(self.pa.encode('Slade'), ('SLT', 'XLT'))
        self.assertEqual(self.pa.encode('Slye'), ('SL', 'XL'))
        self.assertEqual(self.pa.encode('Smedley'), ('SMTL', 'XMTL'))
        self.assertEqual(self.pa.encode('Smith'), ('SM0', 'XMT'))
        self.assertEqual(self.pa.encode('Snow'), ('SN', 'XNF'))
        self.assertEqual(self.pa.encode('Soole'), ('SL', ''))
        self.assertEqual(self.pa.encode('Soule'), ('SL', ''))
        self.assertEqual(self.pa.encode('Southworth'), ('S0R0', 'STRT'))
        self.assertEqual(self.pa.encode('Sowles'), ('SLS', ''))
        self.assertEqual(self.pa.encode('Spalding'), ('SPLTNK', ''))
        self.assertEqual(self.pa.encode('Spark'), ('SPRK', ''))
        self.assertEqual(self.pa.encode('Spencer'), ('SPNSR', ''))
        self.assertEqual(self.pa.encode('Sperry'), ('SPR', ''))
        self.assertEqual(self.pa.encode('Spofford'), ('SPFRT', ''))
        self.assertEqual(self.pa.encode('Spooner'), ('SPNR', ''))
        self.assertEqual(self.pa.encode('Sprague'), ('SPRK', ''))
        self.assertEqual(self.pa.encode('Springer'), ('SPRNKR', 'SPRNJR'))
        self.assertEqual(self.pa.encode('St. Clair'), ('STKLR', ''))
        self.assertEqual(self.pa.encode('St. Claire'), ('STKLR', ''))
        self.assertEqual(self.pa.encode('St. Leger'), ('STLJR', 'STLKR'))
        self.assertEqual(self.pa.encode('St. Omer'), ('STMR', ''))
        self.assertEqual(self.pa.encode('Stafferton'), ('STFRTN', ''))
        self.assertEqual(self.pa.encode('Stafford'), ('STFRT', ''))
        self.assertEqual(self.pa.encode('Stalham'), ('STLM', ''))
        self.assertEqual(self.pa.encode('Stanford'), ('STNFRT', ''))
        self.assertEqual(self.pa.encode('Stanton'), ('STNTN', ''))
        self.assertEqual(self.pa.encode('Star'), ('STR', ''))
        self.assertEqual(self.pa.encode('Starbuck'), ('STRPK', ''))
        self.assertEqual(self.pa.encode('Starkey'), ('STRK', ''))
        self.assertEqual(self.pa.encode('Starkweather'), ('STRK0R', 'STRKTR'))
        self.assertEqual(self.pa.encode('Stearns'), ('STRNS', ''))
        self.assertEqual(self.pa.encode('Stebbins'), ('STPNS', ''))
        self.assertEqual(self.pa.encode('Steele'), ('STL', ''))
        self.assertEqual(self.pa.encode('Stephenson'), ('STFNSN', ''))
        self.assertEqual(self.pa.encode('Stevens'), ('STFNS', ''))
        self.assertEqual(self.pa.encode('Stoddard'), ('STTRT', ''))
        self.assertEqual(self.pa.encode('Stodder'), ('STTR', ''))
        self.assertEqual(self.pa.encode('Stone'), ('STN', ''))
        self.assertEqual(self.pa.encode('Storey'), ('STR', ''))
        self.assertEqual(self.pa.encode('Storrada'), ('STRT', ''))
        self.assertEqual(self.pa.encode('Story'), ('STR', ''))
        self.assertEqual(self.pa.encode('Stoughton'), ('STFTN', ''))
        self.assertEqual(self.pa.encode('Stout'), ('STT', ''))
        self.assertEqual(self.pa.encode('Stow'), ('ST', 'STF'))
        self.assertEqual(self.pa.encode('Strong'), ('STRNK', ''))
        self.assertEqual(self.pa.encode('Strutt'), ('STRT', ''))
        self.assertEqual(self.pa.encode('Stryker'), ('STRKR', ''))
        self.assertEqual(self.pa.encode('Stuckeley'), ('STKL', ''))
        self.assertEqual(self.pa.encode('Sturges'), ('STRJS', 'STRKS'))
        self.assertEqual(self.pa.encode('Sturgess'), ('STRJS', 'STRKS'))
        self.assertEqual(self.pa.encode('Sturgis'), ('STRJS', 'STRKS'))
        self.assertEqual(self.pa.encode('Suevain'), ('SFN', ''))
        self.assertEqual(self.pa.encode('Sulyard'), ('SLRT', ''))
        self.assertEqual(self.pa.encode('Sutton'), ('STN', ''))
        self.assertEqual(self.pa.encode('Swain'), ('SN', 'XN'))
        self.assertEqual(self.pa.encode('Swayne'), ('SN', 'XN'))
        self.assertEqual(self.pa.encode('Swayze'), ('SS', 'XTS'))
        self.assertEqual(self.pa.encode('Swift'), ('SFT', 'XFT'))
        self.assertEqual(self.pa.encode('Taber'), ('TPR', ''))
        self.assertEqual(self.pa.encode('Talcott'), ('TLKT', ''))
        self.assertEqual(self.pa.encode('Tarne'), ('TRN', ''))
        self.assertEqual(self.pa.encode('Tatum'), ('TTM', ''))
        self.assertEqual(self.pa.encode('Taverner'), ('TFRNR', ''))
        self.assertEqual(self.pa.encode('Taylor'), ('TLR', ''))
        self.assertEqual(self.pa.encode('Tenney'), ('TN', ''))
        self.assertEqual(self.pa.encode('Thayer'), ('0R', 'TR'))
        self.assertEqual(self.pa.encode('Thember'), ('0MPR', 'TMPR'))
        self.assertEqual(self.pa.encode('Thomas'), ('TMS', ''))
        self.assertEqual(self.pa.encode('Thompson'), ('TMPSN', ''))
        self.assertEqual(self.pa.encode('Thorne'), ('0RN', 'TRN'))
        self.assertEqual(self.pa.encode('Thornycraft'), ('0RNKRFT', 'TRNKRFT'))
        self.assertEqual(self.pa.encode('Threlkeld'), ('0RLKLT', 'TRLKLT'))
        self.assertEqual(
            self.pa.encode('Throckmorton'), ('0RKMRTN', 'TRKMRTN')
        )
        self.assertEqual(self.pa.encode('Thwaits'), ('0TS', 'TTS'))
        self.assertEqual(self.pa.encode('Tibbetts'), ('TPTS', ''))
        self.assertEqual(self.pa.encode('Tidd'), ('TT', ''))
        self.assertEqual(self.pa.encode('Tierney'), ('TRN', ''))
        self.assertEqual(self.pa.encode('Tilley'), ('TL', ''))
        self.assertEqual(self.pa.encode('Tillieres'), ('TLRS', ''))
        self.assertEqual(self.pa.encode('Tilly'), ('TL', ''))
        self.assertEqual(self.pa.encode('Tisdale'), ('TSTL', ''))
        self.assertEqual(self.pa.encode('Titus'), ('TTS', ''))
        self.assertEqual(self.pa.encode('Tobey'), ('TP', ''))
        self.assertEqual(self.pa.encode('Tooker'), ('TKR', ''))
        self.assertEqual(self.pa.encode('Towle'), ('TL', ''))
        self.assertEqual(self.pa.encode('Towne'), ('TN', ''))
        self.assertEqual(self.pa.encode('Townsend'), ('TNSNT', ''))
        self.assertEqual(self.pa.encode('Treadway'), ('TRT', ''))
        self.assertEqual(self.pa.encode('Trelawney'), ('TRLN', ''))
        self.assertEqual(self.pa.encode('Trinder'), ('TRNTR', ''))
        self.assertEqual(self.pa.encode('Tripp'), ('TRP', ''))
        self.assertEqual(self.pa.encode('Trippe'), ('TRP', ''))
        self.assertEqual(self.pa.encode('Trott'), ('TRT', ''))
        self.assertEqual(self.pa.encode('True'), ('TR', ''))
        self.assertEqual(self.pa.encode('Trussebut'), ('TRSPT', ''))
        self.assertEqual(self.pa.encode('Tucker'), ('TKR', ''))
        self.assertEqual(self.pa.encode('Turgeon'), ('TRJN', 'TRKN'))
        self.assertEqual(self.pa.encode('Turner'), ('TRNR', ''))
        self.assertEqual(self.pa.encode('Tuttle'), ('TTL', ''))
        self.assertEqual(self.pa.encode('Tyler'), ('TLR', ''))
        self.assertEqual(self.pa.encode('Tylle'), ('TL', ''))
        self.assertEqual(self.pa.encode('Tyrrel'), ('TRL', ''))
        self.assertEqual(self.pa.encode('Ua Tuathail'), ('AT0L', 'ATTL'))
        self.assertEqual(self.pa.encode('Ulrich'), ('ALRX', 'ALRK'))
        self.assertEqual(self.pa.encode('Underhill'), ('ANTRL', ''))
        self.assertEqual(self.pa.encode('Underwood'), ('ANTRT', ''))
        self.assertEqual(self.pa.encode('Unknown'), ('ANKNN', ''))
        self.assertEqual(self.pa.encode('Valentine'), ('FLNTN', ''))
        self.assertEqual(self.pa.encode('Van Egmond'), ('FNKMNT', ''))
        self.assertEqual(self.pa.encode('Van der Beek'), ('FNTRPK', ''))
        self.assertEqual(self.pa.encode('Vaughan'), ('FKN', ''))
        self.assertEqual(self.pa.encode('Vermenlen'), ('FRMNLN', ''))
        self.assertEqual(self.pa.encode('Vincent'), ('FNSNT', ''))
        self.assertEqual(self.pa.encode('Volentine'), ('FLNTN', ''))
        self.assertEqual(self.pa.encode('Wagner'), ('AKNR', 'FKNR'))
        self.assertEqual(self.pa.encode('Waite'), ('AT', 'FT'))
        self.assertEqual(self.pa.encode('Walker'), ('ALKR', 'FLKR'))
        self.assertEqual(self.pa.encode('Walter'), ('ALTR', 'FLTR'))
        self.assertEqual(self.pa.encode('Wandell'), ('ANTL', 'FNTL'))
        self.assertEqual(self.pa.encode('Wandesford'), ('ANTSFRT', 'FNTSFRT'))
        self.assertEqual(self.pa.encode('Warbleton'), ('ARPLTN', 'FRPLTN'))
        self.assertEqual(self.pa.encode('Ward'), ('ART', 'FRT'))
        self.assertEqual(self.pa.encode('Warde'), ('ART', 'FRT'))
        self.assertEqual(self.pa.encode('Ware'), ('AR', 'FR'))
        self.assertEqual(self.pa.encode('Wareham'), ('ARHM', 'FRHM'))
        self.assertEqual(self.pa.encode('Warner'), ('ARNR', 'FRNR'))
        self.assertEqual(self.pa.encode('Warren'), ('ARN', 'FRN'))
        self.assertEqual(self.pa.encode('Washburne'), ('AXPRN', 'FXPRN'))
        self.assertEqual(self.pa.encode('Waterbury'), ('ATRPR', 'FTRPR'))
        self.assertEqual(self.pa.encode('Watson'), ('ATSN', 'FTSN'))
        self.assertEqual(
            self.pa.encode('WatsonEllithorpe'), ('ATSNL0RP', 'FTSNLTRP')
        )
        self.assertEqual(self.pa.encode('Watts'), ('ATS', 'FTS'))
        self.assertEqual(self.pa.encode('Wayne'), ('AN', 'FN'))
        self.assertEqual(self.pa.encode('Webb'), ('AP', 'FP'))
        self.assertEqual(self.pa.encode('Weber'), ('APR', 'FPR'))
        self.assertEqual(self.pa.encode('Webster'), ('APSTR', 'FPSTR'))
        self.assertEqual(self.pa.encode('Weed'), ('AT', 'FT'))
        self.assertEqual(self.pa.encode('Weeks'), ('AKS', 'FKS'))
        self.assertEqual(self.pa.encode('Wells'), ('ALS', 'FLS'))
        self.assertEqual(self.pa.encode('Wenzell'), ('ANSL', 'FNTSL'))
        self.assertEqual(self.pa.encode('West'), ('AST', 'FST'))
        self.assertEqual(self.pa.encode('Westbury'), ('ASTPR', 'FSTPR'))
        self.assertEqual(self.pa.encode('Whatlocke'), ('ATLK', ''))
        self.assertEqual(self.pa.encode('Wheeler'), ('ALR', ''))
        self.assertEqual(self.pa.encode('Whiston'), ('ASTN', ''))
        self.assertEqual(self.pa.encode('White'), ('AT', ''))
        self.assertEqual(self.pa.encode('Whitman'), ('ATMN', ''))
        self.assertEqual(self.pa.encode('Whiton'), ('ATN', ''))
        self.assertEqual(self.pa.encode('Whitson'), ('ATSN', ''))
        self.assertEqual(self.pa.encode('Wickes'), ('AKS', 'FKS'))
        self.assertEqual(self.pa.encode('Wilbur'), ('ALPR', 'FLPR'))
        self.assertEqual(self.pa.encode('Wilcotes'), ('ALKTS', 'FLKTS'))
        self.assertEqual(self.pa.encode('Wilkinson'), ('ALKNSN', 'FLKNSN'))
        self.assertEqual(self.pa.encode('Willets'), ('ALTS', 'FLTS'))
        self.assertEqual(self.pa.encode('Willett'), ('ALT', 'FLT'))
        self.assertEqual(self.pa.encode('Willey'), ('AL', 'FL'))
        self.assertEqual(self.pa.encode('Williams'), ('ALMS', 'FLMS'))
        self.assertEqual(self.pa.encode('Williston'), ('ALSTN', 'FLSTN'))
        self.assertEqual(self.pa.encode('Wilson'), ('ALSN', 'FLSN'))
        self.assertEqual(self.pa.encode('Wimes'), ('AMS', 'FMS'))
        self.assertEqual(self.pa.encode('Winch'), ('ANX', 'FNK'))
        self.assertEqual(self.pa.encode('Winegar'), ('ANKR', 'FNKR'))
        self.assertEqual(self.pa.encode('Wing'), ('ANK', 'FNK'))
        self.assertEqual(self.pa.encode('Winsley'), ('ANSL', 'FNSL'))
        self.assertEqual(self.pa.encode('Winslow'), ('ANSL', 'FNSLF'))
        self.assertEqual(self.pa.encode('Winthrop'), ('AN0RP', 'FNTRP'))
        self.assertEqual(self.pa.encode('Wise'), ('AS', 'FS'))
        self.assertEqual(self.pa.encode('Wood'), ('AT', 'FT'))
        self.assertEqual(self.pa.encode('Woodbridge'), ('ATPRJ', 'FTPRJ'))
        self.assertEqual(self.pa.encode('Woodward'), ('ATRT', 'FTRT'))
        self.assertEqual(self.pa.encode('Wooley'), ('AL', 'FL'))
        self.assertEqual(self.pa.encode('Woolley'), ('AL', 'FL'))
        self.assertEqual(self.pa.encode('Worth'), ('AR0', 'FRT'))
        self.assertEqual(self.pa.encode('Worthen'), ('AR0N', 'FRTN'))
        self.assertEqual(self.pa.encode('Worthley'), ('AR0L', 'FRTL'))
        self.assertEqual(self.pa.encode('Wright'), ('RT', ''))
        self.assertEqual(self.pa.encode('Wyer'), ('AR', 'FR'))
        self.assertEqual(self.pa.encode('Wyere'), ('AR', 'FR'))
        self.assertEqual(self.pa.encode('Wynkoop'), ('ANKP', 'FNKP'))
        self.assertEqual(self.pa.encode('Yarnall'), ('ARNL', ''))
        self.assertEqual(self.pa.encode('Yeoman'), ('AMN', ''))
        self.assertEqual(self.pa.encode('Yorke'), ('ARK', ''))
        self.assertEqual(self.pa.encode('Young'), ('ANK', ''))
        self.assertEqual(self.pa.encode('ab Wennonwen'), ('APNNN', ''))
        self.assertEqual(self.pa.encode('ap Llewellyn'), ('APLLN', ''))
        self.assertEqual(self.pa.encode('ap Lorwerth'), ('APLRR0', 'APLRRT'))
        self.assertEqual(self.pa.encode('d\'Angouleme'), ('TNKLM', ''))
        self.assertEqual(self.pa.encode('de Audeham'), ('TTHM', ''))
        self.assertEqual(self.pa.encode('de Bavant'), ('TPFNT', ''))
        self.assertEqual(self.pa.encode('de Beauchamp'), ('TPXMP', 'TPKMP'))
        self.assertEqual(self.pa.encode('de Beaumont'), ('TPMNT', ''))
        self.assertEqual(self.pa.encode('de Bolbec'), ('TPLPK', ''))
        self.assertEqual(self.pa.encode('de Braiose'), ('TPRS', ''))
        self.assertEqual(self.pa.encode('de Braose'), ('TPRS', ''))
        self.assertEqual(self.pa.encode('de Briwere'), ('TPRR', ''))
        self.assertEqual(self.pa.encode('de Cantelou'), ('TKNTL', ''))
        self.assertEqual(self.pa.encode('de Cherelton'), ('TXRLTN', 'TKRLTN'))
        self.assertEqual(self.pa.encode('de Cherleton'), ('TXRLTN', 'TKRLTN'))
        self.assertEqual(self.pa.encode('de Clare'), ('TKLR', ''))
        self.assertEqual(self.pa.encode('de Claremont'), ('TKLRMNT', ''))
        self.assertEqual(self.pa.encode('de Clifford'), ('TKLFRT', ''))
        self.assertEqual(self.pa.encode('de Colville'), ('TKLFL', ''))
        self.assertEqual(self.pa.encode('de Courtenay'), ('TKRTN', ''))
        self.assertEqual(self.pa.encode('de Fauconberg'), ('TFKNPRK', ''))
        self.assertEqual(self.pa.encode('de Forest'), ('TFRST', ''))
        self.assertEqual(self.pa.encode('de Gai'), ('TK', ''))
        self.assertEqual(self.pa.encode('de Grey'), ('TKR', ''))
        self.assertEqual(self.pa.encode('de Guernons'), ('TKRNNS', ''))
        self.assertEqual(self.pa.encode('de Haia'), ('T', ''))
        self.assertEqual(self.pa.encode('de Harcourt'), ('TRKRT', ''))
        self.assertEqual(self.pa.encode('de Hastings'), ('TSTNKS', ''))
        self.assertEqual(self.pa.encode('de Hoke'), ('TK', ''))
        self.assertEqual(self.pa.encode('de Hooch'), ('TK', ''))
        self.assertEqual(self.pa.encode('de Hugelville'), ('TJLFL', 'TKLFL'))
        self.assertEqual(self.pa.encode('de Huntingdon'), ('TNTNKTN', ''))
        self.assertEqual(self.pa.encode('de Insula'), ('TNSL', ''))
        self.assertEqual(self.pa.encode('de Keynes'), ('TKNS', ''))
        self.assertEqual(self.pa.encode('de Lacy'), ('TLS', ''))
        self.assertEqual(self.pa.encode('de Lexington'), ('TLKSNKTN', ''))
        self.assertEqual(self.pa.encode('de Lusignan'), ('TLSNN', 'TLSKNN'))
        self.assertEqual(self.pa.encode('de Manvers'), ('TMNFRS', ''))
        self.assertEqual(self.pa.encode('de Montagu'), ('TMNTK', ''))
        self.assertEqual(self.pa.encode('de Montault'), ('TMNTLT', ''))
        self.assertEqual(self.pa.encode('de Montfort'), ('TMNTFRT', ''))
        self.assertEqual(self.pa.encode('de Mortimer'), ('TMRTMR', ''))
        self.assertEqual(self.pa.encode('de Morville'), ('TMRFL', ''))
        self.assertEqual(self.pa.encode('de Morvois'), ('TMRF', 'TMRFS'))
        self.assertEqual(self.pa.encode('de Neufmarche'), ('TNFMRX', 'TNFMRK'))
        self.assertEqual(self.pa.encode('de Odingsells'), ('TTNKSLS', ''))
        self.assertEqual(self.pa.encode('de Odyngsells'), ('TTNKSLS', ''))
        self.assertEqual(self.pa.encode('de Percy'), ('TPRS', ''))
        self.assertEqual(self.pa.encode('de Pierrepont'), ('TPRPNT', ''))
        self.assertEqual(self.pa.encode('de Plessetis'), ('TPLSTS', ''))
        self.assertEqual(self.pa.encode('de Porhoet'), ('TPRT', ''))
        self.assertEqual(self.pa.encode('de Prouz'), ('TPRS', ''))
        self.assertEqual(self.pa.encode('de Quincy'), ('TKNS', ''))
        self.assertEqual(self.pa.encode('de Ripellis'), ('TRPLS', ''))
        self.assertEqual(self.pa.encode('de Ros'), ('TRS', ''))
        self.assertEqual(self.pa.encode('de Salisbury'), ('TSLSPR', ''))
        self.assertEqual(self.pa.encode('de Sanford'), ('TSNFRT', ''))
        self.assertEqual(self.pa.encode('de Somery'), ('TSMR', ''))
        self.assertEqual(self.pa.encode('de St. Hilary'), ('TSTLR', ''))
        self.assertEqual(self.pa.encode('de St. Liz'), ('TSTLS', ''))
        self.assertEqual(self.pa.encode('de Sutton'), ('TSTN', ''))
        self.assertEqual(self.pa.encode('de Toeni'), ('TTN', ''))
        self.assertEqual(self.pa.encode('de Tony'), ('TTN', ''))
        self.assertEqual(self.pa.encode('de Umfreville'), ('TMFRFL', ''))
        self.assertEqual(self.pa.encode('de Valognes'), ('TFLNS', 'TFLKNS'))
        self.assertEqual(self.pa.encode('de Vaux'), ('TF', ''))
        self.assertEqual(self.pa.encode('de Vere'), ('TFR', ''))
        self.assertEqual(
            self.pa.encode('de Vermandois'), ('TFRMNT', 'TFRMNTS')
        )
        self.assertEqual(self.pa.encode('de Vernon'), ('TFRNN', ''))
        self.assertEqual(self.pa.encode('de Vexin'), ('TFKSN', ''))
        self.assertEqual(self.pa.encode('de Vitre'), ('TFTR', ''))
        self.assertEqual(self.pa.encode('de Wandesford'), ('TNTSFRT', ''))
        self.assertEqual(self.pa.encode('de Warenne'), ('TRN', ''))
        self.assertEqual(self.pa.encode('de Westbury'), ('TSTPR', ''))
        self.assertEqual(self.pa.encode('di Saluzzo'), ('TSLS', 'TSLTS'))
        self.assertEqual(self.pa.encode('fitz Alan'), ('FTSLN', ''))
        self.assertEqual(self.pa.encode('fitz Geoffrey'), ('FTSJFR', 'FTSKFR'))
        self.assertEqual(self.pa.encode('fitz Herbert'), ('FTSRPRT', ''))
        self.assertEqual(self.pa.encode('fitz John'), ('FTSJN', ''))
        self.assertEqual(self.pa.encode('fitz Patrick'), ('FTSPTRK', ''))
        self.assertEqual(self.pa.encode('fitz Payn'), ('FTSPN', ''))
        self.assertEqual(self.pa.encode('fitz Piers'), ('FTSPRS', ''))
        self.assertEqual(self.pa.encode('fitz Randolph'), ('FTSRNTLF', ''))
        self.assertEqual(
            self.pa.encode('fitz Richard'), ('FTSRXRT', 'FTSRKRT')
        )
        self.assertEqual(self.pa.encode('fitz Robert'), ('FTSRPRT', ''))
        self.assertEqual(self.pa.encode('fitz Roy'), ('FTSR', ''))
        self.assertEqual(self.pa.encode('fitz Scrob'), ('FTSSKP', ''))
        self.assertEqual(self.pa.encode('fitz Walter'), ('FTSLTR', ''))
        self.assertEqual(self.pa.encode('fitz Warin'), ('FTSRN', ''))
        self.assertEqual(self.pa.encode('fitz Williams'), ('FTSLMS', ''))
        self.assertEqual(self.pa.encode('la Zouche'), ('LSX', 'LSK'))
        self.assertEqual(self.pa.encode('le Botiller'), ('LPTLR', ''))
        self.assertEqual(self.pa.encode('le Despenser'), ('LTSPNSR', ''))
        self.assertEqual(self.pa.encode('le deSpencer'), ('LTSPNSR', ''))
        self.assertEqual(self.pa.encode('of Allendale'), ('AFLNTL', ''))
        self.assertEqual(self.pa.encode('of Angouleme'), ('AFNKLM', ''))
        self.assertEqual(self.pa.encode('of Anjou'), ('AFNJ', ''))
        self.assertEqual(self.pa.encode('of Aquitaine'), ('AFKTN', ''))
        self.assertEqual(self.pa.encode('of Aumale'), ('AFML', ''))
        self.assertEqual(self.pa.encode('of Bavaria'), ('AFPFR', ''))
        self.assertEqual(self.pa.encode('of Boulogne'), ('AFPLN', 'AFPLKN'))
        self.assertEqual(self.pa.encode('of Brittany'), ('AFPRTN', ''))
        self.assertEqual(self.pa.encode('of Brittary'), ('AFPRTR', ''))
        self.assertEqual(self.pa.encode('of Castile'), ('AFKSTL', ''))
        self.assertEqual(self.pa.encode('of Chester'), ('AFXSTR', 'AFKSTR'))
        self.assertEqual(self.pa.encode('of Clermont'), ('AFKLRMNT', ''))
        self.assertEqual(self.pa.encode('of Cologne'), ('AFKLN', 'AFKLKN'))
        self.assertEqual(self.pa.encode('of Dinan'), ('AFTNN', ''))
        self.assertEqual(self.pa.encode('of Dunbar'), ('AFTNPR', ''))
        self.assertEqual(self.pa.encode('of England'), ('AFNKLNT', ''))
        self.assertEqual(self.pa.encode('of Essex'), ('AFSKS', ''))
        self.assertEqual(self.pa.encode('of Falaise'), ('AFFLS', ''))
        self.assertEqual(self.pa.encode('of Flanders'), ('AFFLNTRS', ''))
        self.assertEqual(self.pa.encode('of Galloway'), ('AFKL', ''))
        self.assertEqual(self.pa.encode('of Germany'), ('AFKRMN', 'AFJRMN'))
        self.assertEqual(self.pa.encode('of Gloucester'), ('AFKLSSTR', ''))
        self.assertEqual(self.pa.encode('of Heristal'), ('AFRSTL', ''))
        self.assertEqual(self.pa.encode('of Hungary'), ('AFNKR', ''))
        self.assertEqual(self.pa.encode('of Huntington'), ('AFNTNKTN', ''))
        self.assertEqual(self.pa.encode('of Kiev'), ('AFKF', ''))
        self.assertEqual(self.pa.encode('of Kuno'), ('AFKN', ''))
        self.assertEqual(self.pa.encode('of Landen'), ('AFLNTN', ''))
        self.assertEqual(self.pa.encode('of Laon'), ('AFLN', ''))
        self.assertEqual(self.pa.encode('of Leinster'), ('AFLNSTR', ''))
        self.assertEqual(self.pa.encode('of Lens'), ('AFLNS', ''))
        self.assertEqual(self.pa.encode('of Lorraine'), ('AFLRN', ''))
        self.assertEqual(self.pa.encode('of Louvain'), ('AFLFN', ''))
        self.assertEqual(self.pa.encode('of Mercia'), ('AFMRS', 'AFMRX'))
        self.assertEqual(self.pa.encode('of Metz'), ('AFMTS', ''))
        self.assertEqual(self.pa.encode('of Meulan'), ('AFMLN', ''))
        self.assertEqual(self.pa.encode('of Nass'), ('AFNS', ''))
        self.assertEqual(self.pa.encode('of Normandy'), ('AFNRMNT', ''))
        self.assertEqual(self.pa.encode('of Ohningen'), ('AFNNJN', 'AFNNKN'))
        self.assertEqual(self.pa.encode('of Orleans'), ('AFRLNS', ''))
        self.assertEqual(self.pa.encode('of Poitou'), ('AFPT', ''))
        self.assertEqual(self.pa.encode('of Polotzk'), ('AFPLTSK', ''))
        self.assertEqual(self.pa.encode('of Provence'), ('AFPRFNS', ''))
        self.assertEqual(
            self.pa.encode('of Ringelheim'), ('AFRNJLM', 'AFRNKLM')
        )
        self.assertEqual(self.pa.encode('of Salisbury'), ('AFSLSPR', ''))
        self.assertEqual(self.pa.encode('of Saxony'), ('AFSKSN', ''))
        self.assertEqual(self.pa.encode('of Scotland'), ('AFSKTLNT', ''))
        self.assertEqual(self.pa.encode('of Senlis'), ('AFSNLS', ''))
        self.assertEqual(self.pa.encode('of Stafford'), ('AFSTFRT', ''))
        self.assertEqual(self.pa.encode('of Swabia'), ('AFSP', ''))
        self.assertEqual(self.pa.encode('of Tongres'), ('AFTNKRS', ''))
        self.assertEqual(
            self.pa.encode('of the Tributes'), ('AF0TRPTS', 'AFTTRPTS')
        )
        self.assertEqual(self.pa.encode('unknown'), ('ANKNN', ''))
        self.assertEqual(self.pa.encode('van der Gouda'), ('FNTRKT', ''))
        self.assertEqual(self.pa.encode('von Adenbaugh'), ('FNTNP', ''))
        self.assertEqual(self.pa.encode('ARCHITure'), ('ARKTR', ''))
        self.assertEqual(self.pa.encode('Arnoff'), ('ARNF', ''))
        self.assertEqual(self.pa.encode('Arnow'), ('ARN', 'ARNF'))
        self.assertEqual(self.pa.encode('DANGER'), ('TNJR', 'TNKR'))
        self.assertEqual(self.pa.encode('Jankelowicz'), ('JNKLTS', 'ANKLFX'))
        self.assertEqual(self.pa.encode('MANGER'), ('MNJR', 'MNKR'))
        self.assertEqual(self.pa.encode('McClellan'), ('MKLLN', ''))
        self.assertEqual(self.pa.encode('McHugh'), ('MK', ''))
        self.assertEqual(self.pa.encode('McLaughlin'), ('MKLFLN', ''))
        self.assertEqual(self.pa.encode('ORCHEStra'), ('ARKSTR', ''))
        self.assertEqual(self.pa.encode('ORCHID'), ('ARKT', ''))
        self.assertEqual(self.pa.encode('Pierce'), ('PRS', ''))
        self.assertEqual(self.pa.encode('RANGER'), ('RNJR', 'RNKR'))
        self.assertEqual(self.pa.encode('Schlesinger'), ('XLSNKR', 'SLSNJR'))
        self.assertEqual(self.pa.encode('Uomo'), ('AM', ''))
        self.assertEqual(self.pa.encode('Vasserman'), ('FSRMN', ''))
        self.assertEqual(self.pa.encode('Wasserman'), ('ASRMN', 'FSRMN'))
        self.assertEqual(self.pa.encode('Womo'), ('AM', 'FM'))
        self.assertEqual(self.pa.encode('Yankelovich'), ('ANKLFX', 'ANKLFK'))
        self.assertEqual(self.pa.encode('accede'), ('AKST', ''))
        self.assertEqual(self.pa.encode('accident'), ('AKSTNT', ''))
        self.assertEqual(self.pa.encode('adelsheim'), ('ATLSM', ''))
        self.assertEqual(self.pa.encode('aged'), ('AJT', 'AKT'))
        self.assertEqual(self.pa.encode('ageless'), ('AJLS', 'AKLS'))
        self.assertEqual(self.pa.encode('agency'), ('AJNS', 'AKNS'))
        self.assertEqual(self.pa.encode('aghast'), ('AKST', ''))
        self.assertEqual(self.pa.encode('agio'), ('AJ', 'AK'))
        self.assertEqual(self.pa.encode('agrimony'), ('AKRMN', ''))
        self.assertEqual(self.pa.encode('album'), ('ALPM', ''))
        self.assertEqual(self.pa.encode('alcmene'), ('ALKMN', ''))
        self.assertEqual(self.pa.encode('alehouse'), ('ALHS', ''))
        self.assertEqual(self.pa.encode('antique'), ('ANTK', ''))
        self.assertEqual(self.pa.encode('artois'), ('ART', 'ARTS'))
        self.assertEqual(self.pa.encode('automation'), ('ATMXN', ''))
        self.assertEqual(self.pa.encode('bacchus'), ('PKS', ''))
        self.assertEqual(self.pa.encode('bacci'), ('PX', ''))
        self.assertEqual(self.pa.encode('bajador'), ('PJTR', 'PHTR'))
        self.assertEqual(self.pa.encode('bellocchio'), ('PLX', ''))
        self.assertEqual(self.pa.encode('bertucci'), ('PRTX', ''))
        self.assertEqual(self.pa.encode('biaggi'), ('PJ', 'PK'))
        self.assertEqual(self.pa.encode('bough'), ('P', ''))
        self.assertEqual(self.pa.encode('breaux'), ('PR', ''))
        self.assertEqual(self.pa.encode('broughton'), ('PRTN', ''))
        self.assertEqual(self.pa.encode('cabrillo'), ('KPRL', 'KPR'))
        self.assertEqual(self.pa.encode('caesar'), ('SSR', ''))
        self.assertEqual(self.pa.encode('cagney'), ('KKN', ''))
        self.assertEqual(self.pa.encode('campbell'), ('KMPL', ''))
        self.assertEqual(self.pa.encode('carlisle'), ('KRLL', ''))
        self.assertEqual(self.pa.encode('carlysle'), ('KRLL', ''))
        self.assertEqual(self.pa.encode('chemistry'), ('KMSTR', ''))
        self.assertEqual(self.pa.encode('chianti'), ('KNT', ''))
        self.assertEqual(self.pa.encode('chorus'), ('KRS', ''))
        self.assertEqual(self.pa.encode('cough'), ('KF', ''))
        self.assertEqual(self.pa.encode('czerny'), ('SRN', 'XRN'))
        self.assertEqual(self.pa.encode('deffenbacher'), ('TFNPKR', ''))
        self.assertEqual(self.pa.encode('dumb'), ('TM', ''))
        self.assertEqual(self.pa.encode('edgar'), ('ATKR', ''))
        self.assertEqual(self.pa.encode('edge'), ('AJ', ''))
        self.assertEqual(self.pa.encode('filipowicz'), ('FLPTS', 'FLPFX'))
        self.assertEqual(self.pa.encode('focaccia'), ('FKX', ''))
        self.assertEqual(self.pa.encode('gallegos'), ('KLKS', 'KKS'))
        self.assertEqual(self.pa.encode('gambrelli'), ('KMPRL', ''))
        self.assertEqual(self.pa.encode('geithain'), ('K0N', 'JTN'))
        self.assertEqual(self.pa.encode('ghiradelli'), ('JRTL', ''))
        self.assertEqual(self.pa.encode('ghislane'), ('JLN', ''))
        self.assertEqual(self.pa.encode('gough'), ('KF', ''))
        self.assertEqual(self.pa.encode('hartheim'), ('HR0M', 'HRTM'))
        self.assertEqual(self.pa.encode('heimsheim'), ('HMSM', ''))
        self.assertEqual(self.pa.encode('hochmeier'), ('HKMR', ''))
        self.assertEqual(self.pa.encode('hugh'), ('H', ''))
        self.assertEqual(self.pa.encode('hunger'), ('HNKR', 'HNJR'))
        self.assertEqual(self.pa.encode('hungry'), ('HNKR', ''))
        self.assertEqual(self.pa.encode('island'), ('ALNT', ''))
        self.assertEqual(self.pa.encode('isle'), ('AL', ''))
        self.assertEqual(self.pa.encode('jose'), ('HS', ''))
        self.assertEqual(self.pa.encode('laugh'), ('LF', ''))
        self.assertEqual(self.pa.encode('mac caffrey'), ('MKFR', ''))
        self.assertEqual(self.pa.encode('mac gregor'), ('MKRKR', ''))
        self.assertEqual(self.pa.encode('pegnitz'), ('PNTS', 'PKNTS'))
        self.assertEqual(self.pa.encode('piskowitz'), ('PSKTS', 'PSKFX'))
        self.assertEqual(self.pa.encode('queen'), ('KN', ''))
        self.assertEqual(self.pa.encode('raspberry'), ('RSPR', ''))
        self.assertEqual(self.pa.encode('resnais'), ('RSN', 'RSNS'))
        self.assertEqual(self.pa.encode('rogier'), ('RJ', 'RJR'))
        self.assertEqual(self.pa.encode('rough'), ('RF', ''))
        self.assertEqual(self.pa.encode('san jacinto'), ('SNHSNT', ''))
        self.assertEqual(self.pa.encode('schenker'), ('XNKR', 'SKNKR'))
        self.assertEqual(self.pa.encode('schermerhorn'), ('XRMRRN', 'SKRMRRN'))
        self.assertEqual(self.pa.encode('schmidt'), ('XMT', 'SMT'))
        self.assertEqual(self.pa.encode('schneider'), ('XNTR', 'SNTR'))
        self.assertEqual(self.pa.encode('school'), ('SKL', ''))
        self.assertEqual(self.pa.encode('schooner'), ('SKNR', ''))
        self.assertEqual(self.pa.encode('schrozberg'), ('XRSPRK', 'SRSPRK'))
        self.assertEqual(self.pa.encode('schulman'), ('XLMN', ''))
        self.assertEqual(self.pa.encode('schwabach'), ('XPK', 'XFPK'))
        self.assertEqual(self.pa.encode('schwarzach'), ('XRSK', 'XFRTSK'))
        self.assertEqual(self.pa.encode('smith'), ('SM0', 'XMT'))
        self.assertEqual(self.pa.encode('snider'), ('SNTR', 'XNTR'))
        self.assertEqual(self.pa.encode('succeed'), ('SKST', ''))
        self.assertEqual(self.pa.encode('sugarcane'), ('XKRKN', 'SKRKN'))
        self.assertEqual(self.pa.encode('svobodka'), ('SFPTK', ''))
        self.assertEqual(self.pa.encode('tagliaro'), ('TKLR', 'TLR'))
        self.assertEqual(self.pa.encode('thames'), ('TMS', ''))
        self.assertEqual(self.pa.encode('theilheim'), ('0LM', 'TLM'))
        self.assertEqual(self.pa.encode('thomas'), ('TMS', ''))
        self.assertEqual(self.pa.encode('thumb'), ('0M', 'TM'))
        self.assertEqual(self.pa.encode('tichner'), ('TXNR', 'TKNR'))
        self.assertEqual(self.pa.encode('tough'), ('TF', ''))
        self.assertEqual(self.pa.encode('umbrella'), ('AMPRL', ''))
        self.assertEqual(self.pa.encode('vilshofen'), ('FLXFN', ''))
        self.assertEqual(self.pa.encode('von schuller'), ('FNXLR', ''))
        self.assertEqual(self.pa.encode('wachtler'), ('AKTLR', 'FKTLR'))
        self.assertEqual(self.pa.encode('wechsler'), ('AKSLR', 'FKSLR'))
        self.assertEqual(self.pa.encode('weikersheim'), ('AKRSM', 'FKRSM'))
        self.assertEqual(self.pa.encode('zhao'), ('J', ''))

    def test_double_metaphone_surnames4(self):
        """Test abydos.phonetic.DoubleMetaphone (surname data, 4-letter)."""
        self.assertEqual(self.pa.encode('', 4), ('', ''))
        self.assertEqual(self.pa.encode('ALLERTON', 4), ('ALRT', ''))
        self.assertEqual(self.pa.encode('Acton', 4), ('AKTN', ''))
        self.assertEqual(self.pa.encode('Adams', 4), ('ATMS', ''))
        self.assertEqual(self.pa.encode('Aggar', 4), ('AKR', ''))
        self.assertEqual(self.pa.encode('Ahl', 4), ('AL', ''))
        self.assertEqual(self.pa.encode('Aiken', 4), ('AKN', ''))
        self.assertEqual(self.pa.encode('Alan', 4), ('ALN', ''))
        self.assertEqual(self.pa.encode('Alcock', 4), ('ALKK', ''))
        self.assertEqual(self.pa.encode('Alden', 4), ('ALTN', ''))
        self.assertEqual(self.pa.encode('Aldham', 4), ('ALTM', ''))
        self.assertEqual(self.pa.encode('Allen', 4), ('ALN', ''))
        self.assertEqual(self.pa.encode('Allerton', 4), ('ALRT', ''))
        self.assertEqual(self.pa.encode('Alsop', 4), ('ALSP', ''))
        self.assertEqual(self.pa.encode('Alwein', 4), ('ALN', ''))
        self.assertEqual(self.pa.encode('Ambler', 4), ('AMPL', ''))
        self.assertEqual(self.pa.encode('Andevill', 4), ('ANTF', ''))
        self.assertEqual(self.pa.encode('Andrews', 4), ('ANTR', ''))
        self.assertEqual(self.pa.encode('Andreyco', 4), ('ANTR', ''))
        self.assertEqual(self.pa.encode('Andriesse', 4), ('ANTR', ''))
        self.assertEqual(self.pa.encode('Angier', 4), ('ANJ', 'ANJR'))
        self.assertEqual(self.pa.encode('Annabel', 4), ('ANPL', ''))
        self.assertEqual(self.pa.encode('Anne', 4), ('AN', ''))
        self.assertEqual(self.pa.encode('Anstye', 4), ('ANST', ''))
        self.assertEqual(self.pa.encode('Appling', 4), ('APLN', ''))
        self.assertEqual(self.pa.encode('Apuke', 4), ('APK', ''))
        self.assertEqual(self.pa.encode('Arnold', 4), ('ARNL', ''))
        self.assertEqual(self.pa.encode('Ashby', 4), ('AXP', ''))
        self.assertEqual(self.pa.encode('Astwood', 4), ('ASTT', ''))
        self.assertEqual(self.pa.encode('Atkinson', 4), ('ATKN', ''))
        self.assertEqual(self.pa.encode('Audley', 4), ('ATL', ''))
        self.assertEqual(self.pa.encode('Austin', 4), ('ASTN', ''))
        self.assertEqual(self.pa.encode('Avenal', 4), ('AFNL', ''))
        self.assertEqual(self.pa.encode('Ayer', 4), ('AR', ''))
        self.assertEqual(self.pa.encode('Ayot', 4), ('AT', ''))
        self.assertEqual(self.pa.encode('Babbitt', 4), ('PPT', ''))
        self.assertEqual(self.pa.encode('Bachelor', 4), ('PXLR', 'PKLR'))
        self.assertEqual(self.pa.encode('Bachelour', 4), ('PXLR', 'PKLR'))
        self.assertEqual(self.pa.encode('Bailey', 4), ('PL', ''))
        self.assertEqual(self.pa.encode('Baivel', 4), ('PFL', ''))
        self.assertEqual(self.pa.encode('Baker', 4), ('PKR', ''))
        self.assertEqual(self.pa.encode('Baldwin', 4), ('PLTN', ''))
        self.assertEqual(self.pa.encode('Balsley', 4), ('PLSL', ''))
        self.assertEqual(self.pa.encode('Barber', 4), ('PRPR', ''))
        self.assertEqual(self.pa.encode('Barker', 4), ('PRKR', ''))
        self.assertEqual(self.pa.encode('Barlow', 4), ('PRL', 'PRLF'))
        self.assertEqual(self.pa.encode('Barnard', 4), ('PRNR', ''))
        self.assertEqual(self.pa.encode('Barnes', 4), ('PRNS', ''))
        self.assertEqual(self.pa.encode('Barnsley', 4), ('PRNS', ''))
        self.assertEqual(self.pa.encode('Barouxis', 4), ('PRKS', ''))
        self.assertEqual(self.pa.encode('Bartlet', 4), ('PRTL', ''))
        self.assertEqual(self.pa.encode('Basley', 4), ('PSL', ''))
        self.assertEqual(self.pa.encode('Basset', 4), ('PST', ''))
        self.assertEqual(self.pa.encode('Bassett', 4), ('PST', ''))
        self.assertEqual(self.pa.encode('Batchlor', 4), ('PXLR', ''))
        self.assertEqual(self.pa.encode('Bates', 4), ('PTS', ''))
        self.assertEqual(self.pa.encode('Batson', 4), ('PTSN', ''))
        self.assertEqual(self.pa.encode('Bayes', 4), ('PS', ''))
        self.assertEqual(self.pa.encode('Bayley', 4), ('PL', ''))
        self.assertEqual(self.pa.encode('Beale', 4), ('PL', ''))
        self.assertEqual(self.pa.encode('Beauchamp', 4), ('PXMP', 'PKMP'))
        self.assertEqual(self.pa.encode('Beauclerc', 4), ('PKLR', ''))
        self.assertEqual(self.pa.encode('Beech', 4), ('PK', ''))
        self.assertEqual(self.pa.encode('Beers', 4), ('PRS', ''))
        self.assertEqual(self.pa.encode('Beke', 4), ('PK', ''))
        self.assertEqual(self.pa.encode('Belcher', 4), ('PLXR', 'PLKR'))
        self.assertEqual(self.pa.encode('Benjamin', 4), ('PNJM', ''))
        self.assertEqual(self.pa.encode('Benningham', 4), ('PNNK', ''))
        self.assertEqual(self.pa.encode('Bereford', 4), ('PRFR', ''))
        self.assertEqual(self.pa.encode('Bergen', 4), ('PRJN', 'PRKN'))
        self.assertEqual(self.pa.encode('Berkeley', 4), ('PRKL', ''))
        self.assertEqual(self.pa.encode('Berry', 4), ('PR', ''))
        self.assertEqual(self.pa.encode('Besse', 4), ('PS', ''))
        self.assertEqual(self.pa.encode('Bessey', 4), ('PS', ''))
        self.assertEqual(self.pa.encode('Bessiles', 4), ('PSLS', ''))
        self.assertEqual(self.pa.encode('Bigelow', 4), ('PJL', 'PKLF'))
        self.assertEqual(self.pa.encode('Bigg', 4), ('PK', ''))
        self.assertEqual(self.pa.encode('Bigod', 4), ('PKT', ''))
        self.assertEqual(self.pa.encode('Billings', 4), ('PLNK', ''))
        self.assertEqual(self.pa.encode('Bimper', 4), ('PMPR', ''))
        self.assertEqual(self.pa.encode('Binker', 4), ('PNKR', ''))
        self.assertEqual(self.pa.encode('Birdsill', 4), ('PRTS', ''))
        self.assertEqual(self.pa.encode('Bishop', 4), ('PXP', ''))
        self.assertEqual(self.pa.encode('Black', 4), ('PLK', ''))
        self.assertEqual(self.pa.encode('Blagge', 4), ('PLK', ''))
        self.assertEqual(self.pa.encode('Blake', 4), ('PLK', ''))
        self.assertEqual(self.pa.encode('Blanck', 4), ('PLNK', ''))
        self.assertEqual(self.pa.encode('Bledsoe', 4), ('PLTS', ''))
        self.assertEqual(self.pa.encode('Blennerhasset', 4), ('PLNR', ''))
        self.assertEqual(self.pa.encode('Blessing', 4), ('PLSN', ''))
        self.assertEqual(self.pa.encode('Blewett', 4), ('PLT', ''))
        self.assertEqual(self.pa.encode('Bloctgoed', 4), ('PLKT', ''))
        self.assertEqual(self.pa.encode('Bloetgoet', 4), ('PLTK', ''))
        self.assertEqual(self.pa.encode('Bloodgood', 4), ('PLTK', ''))
        self.assertEqual(self.pa.encode('Blossom', 4), ('PLSM', ''))
        self.assertEqual(self.pa.encode('Blount', 4), ('PLNT', ''))
        self.assertEqual(self.pa.encode('Bodine', 4), ('PTN', ''))
        self.assertEqual(self.pa.encode('Bodman', 4), ('PTMN', ''))
        self.assertEqual(self.pa.encode('BonCoeur', 4), ('PNKR', ''))
        self.assertEqual(self.pa.encode('Bond', 4), ('PNT', ''))
        self.assertEqual(self.pa.encode('Boscawen', 4), ('PSKN', ''))
        self.assertEqual(self.pa.encode('Bosworth', 4), ('PSR0', 'PSRT'))
        self.assertEqual(self.pa.encode('Bouchier', 4), ('PX', 'PKR'))
        self.assertEqual(self.pa.encode('Bowne', 4), ('PN', ''))
        self.assertEqual(self.pa.encode('Bradbury', 4), ('PRTP', ''))
        self.assertEqual(self.pa.encode('Bradder', 4), ('PRTR', ''))
        self.assertEqual(self.pa.encode('Bradford', 4), ('PRTF', ''))
        self.assertEqual(self.pa.encode('Bradstreet', 4), ('PRTS', ''))
        self.assertEqual(self.pa.encode('Braham', 4), ('PRHM', ''))
        self.assertEqual(self.pa.encode('Brailsford', 4), ('PRLS', ''))
        self.assertEqual(self.pa.encode('Brainard', 4), ('PRNR', ''))
        self.assertEqual(self.pa.encode('Brandish', 4), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Braun', 4), ('PRN', ''))
        self.assertEqual(self.pa.encode('Brecc', 4), ('PRK', ''))
        self.assertEqual(self.pa.encode('Brent', 4), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Brenton', 4), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Briggs', 4), ('PRKS', ''))
        self.assertEqual(self.pa.encode('Brigham', 4), ('PRM', ''))
        self.assertEqual(self.pa.encode('Brobst', 4), ('PRPS', ''))
        self.assertEqual(self.pa.encode('Brome', 4), ('PRM', ''))
        self.assertEqual(self.pa.encode('Bronson', 4), ('PRNS', ''))
        self.assertEqual(self.pa.encode('Brooks', 4), ('PRKS', ''))
        self.assertEqual(self.pa.encode('Brouillard', 4), ('PRLR', ''))
        self.assertEqual(self.pa.encode('Brown', 4), ('PRN', ''))
        self.assertEqual(self.pa.encode('Browne', 4), ('PRN', ''))
        self.assertEqual(self.pa.encode('Brownell', 4), ('PRNL', ''))
        self.assertEqual(self.pa.encode('Bruley', 4), ('PRL', ''))
        self.assertEqual(self.pa.encode('Bryant', 4), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Brzozowski', 4), ('PRSS', 'PRTS'))
        self.assertEqual(self.pa.encode('Buide', 4), ('PT', ''))
        self.assertEqual(self.pa.encode('Bulmer', 4), ('PLMR', ''))
        self.assertEqual(self.pa.encode('Bunker', 4), ('PNKR', ''))
        self.assertEqual(self.pa.encode('Burden', 4), ('PRTN', ''))
        self.assertEqual(self.pa.encode('Burge', 4), ('PRJ', 'PRK'))
        self.assertEqual(self.pa.encode('Burgoyne', 4), ('PRKN', ''))
        self.assertEqual(self.pa.encode('Burke', 4), ('PRK', ''))
        self.assertEqual(self.pa.encode('Burnett', 4), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Burpee', 4), ('PRP', ''))
        self.assertEqual(self.pa.encode('Bursley', 4), ('PRSL', ''))
        self.assertEqual(self.pa.encode('Burton', 4), ('PRTN', ''))
        self.assertEqual(self.pa.encode('Bushnell', 4), ('PXNL', ''))
        self.assertEqual(self.pa.encode('Buss', 4), ('PS', ''))
        self.assertEqual(self.pa.encode('Buswell', 4), ('PSL', ''))
        self.assertEqual(self.pa.encode('Butler', 4), ('PTLR', ''))
        self.assertEqual(self.pa.encode('Calkin', 4), ('KLKN', ''))
        self.assertEqual(self.pa.encode('Canada', 4), ('KNT', ''))
        self.assertEqual(self.pa.encode('Canmore', 4), ('KNMR', ''))
        self.assertEqual(self.pa.encode('Canney', 4), ('KN', ''))
        self.assertEqual(self.pa.encode('Capet', 4), ('KPT', ''))
        self.assertEqual(self.pa.encode('Card', 4), ('KRT', ''))
        self.assertEqual(self.pa.encode('Carman', 4), ('KRMN', ''))
        self.assertEqual(self.pa.encode('Carpenter', 4), ('KRPN', ''))
        self.assertEqual(self.pa.encode('Cartwright', 4), ('KRTR', ''))
        self.assertEqual(self.pa.encode('Casey', 4), ('KS', ''))
        self.assertEqual(self.pa.encode('Catterfield', 4), ('KTRF', ''))
        self.assertEqual(self.pa.encode('Ceeley', 4), ('SL', ''))
        self.assertEqual(self.pa.encode('Chambers', 4), ('XMPR', ''))
        self.assertEqual(self.pa.encode('Champion', 4), ('XMPN', ''))
        self.assertEqual(self.pa.encode('Chapman', 4), ('XPMN', ''))
        self.assertEqual(self.pa.encode('Chase', 4), ('XS', ''))
        self.assertEqual(self.pa.encode('Cheney', 4), ('XN', ''))
        self.assertEqual(self.pa.encode('Chetwynd', 4), ('XTNT', ''))
        self.assertEqual(self.pa.encode('Chevalier', 4), ('XFL', 'XFLR'))
        self.assertEqual(self.pa.encode('Chillingsworth', 4), ('XLNK', ''))
        self.assertEqual(self.pa.encode('Christie', 4), ('KRST', ''))
        self.assertEqual(self.pa.encode('Chubbuck', 4), ('XPK', ''))
        self.assertEqual(self.pa.encode('Church', 4), ('XRX', 'XRK'))
        self.assertEqual(self.pa.encode('Clark', 4), ('KLRK', ''))
        self.assertEqual(self.pa.encode('Clarke', 4), ('KLRK', ''))
        self.assertEqual(self.pa.encode('Cleare', 4), ('KLR', ''))
        self.assertEqual(self.pa.encode('Clement', 4), ('KLMN', ''))
        self.assertEqual(self.pa.encode('Clerke', 4), ('KLRK', ''))
        self.assertEqual(self.pa.encode('Clibben', 4), ('KLPN', ''))
        self.assertEqual(self.pa.encode('Clifford', 4), ('KLFR', ''))
        self.assertEqual(self.pa.encode('Clivedon', 4), ('KLFT', ''))
        self.assertEqual(self.pa.encode('Close', 4), ('KLS', ''))
        self.assertEqual(self.pa.encode('Clothilde', 4), ('KL0L', 'KLTL'))
        self.assertEqual(self.pa.encode('Cobb', 4), ('KP', ''))
        self.assertEqual(self.pa.encode('Coburn', 4), ('KPRN', ''))
        self.assertEqual(self.pa.encode('Coburne', 4), ('KPRN', ''))
        self.assertEqual(self.pa.encode('Cocke', 4), ('KK', ''))
        self.assertEqual(self.pa.encode('Coffin', 4), ('KFN', ''))
        self.assertEqual(self.pa.encode('Coffyn', 4), ('KFN', ''))
        self.assertEqual(self.pa.encode('Colborne', 4), ('KLPR', ''))
        self.assertEqual(self.pa.encode('Colby', 4), ('KLP', ''))
        self.assertEqual(self.pa.encode('Cole', 4), ('KL', ''))
        self.assertEqual(self.pa.encode('Coleman', 4), ('KLMN', ''))
        self.assertEqual(self.pa.encode('Collier', 4), ('KL', 'KLR'))
        self.assertEqual(self.pa.encode('Compton', 4), ('KMPT', ''))
        self.assertEqual(self.pa.encode('Cone', 4), ('KN', ''))
        self.assertEqual(self.pa.encode('Cook', 4), ('KK', ''))
        self.assertEqual(self.pa.encode('Cooke', 4), ('KK', ''))
        self.assertEqual(self.pa.encode('Cooper', 4), ('KPR', ''))
        self.assertEqual(self.pa.encode('Copperthwaite', 4), ('KPR0', 'KPRT'))
        self.assertEqual(self.pa.encode('Corbet', 4), ('KRPT', ''))
        self.assertEqual(self.pa.encode('Corell', 4), ('KRL', ''))
        self.assertEqual(self.pa.encode('Corey', 4), ('KR', ''))
        self.assertEqual(self.pa.encode('Corlies', 4), ('KRLS', ''))
        self.assertEqual(self.pa.encode('Corneliszen', 4), ('KRNL', ''))
        self.assertEqual(self.pa.encode('Cornelius', 4), ('KRNL', ''))
        self.assertEqual(self.pa.encode('Cornwallis', 4), ('KRNL', ''))
        self.assertEqual(self.pa.encode('Cosgrove', 4), ('KSKR', ''))
        self.assertEqual(self.pa.encode('Count of Brionne', 4), ('KNTF', ''))
        self.assertEqual(self.pa.encode('Covill', 4), ('KFL', ''))
        self.assertEqual(self.pa.encode('Cowperthwaite', 4), ('KPR0', 'KPRT'))
        self.assertEqual(self.pa.encode('Cowperwaite', 4), ('KPRT', ''))
        self.assertEqual(self.pa.encode('Crane', 4), ('KRN', ''))
        self.assertEqual(self.pa.encode('Creagmile', 4), ('KRKM', ''))
        self.assertEqual(self.pa.encode('Crew', 4), ('KR', 'KRF'))
        self.assertEqual(self.pa.encode('Crispin', 4), ('KRSP', ''))
        self.assertEqual(self.pa.encode('Crocker', 4), ('KRKR', ''))
        self.assertEqual(self.pa.encode('Crockett', 4), ('KRKT', ''))
        self.assertEqual(self.pa.encode('Crosby', 4), ('KRSP', ''))
        self.assertEqual(self.pa.encode('Crump', 4), ('KRMP', ''))
        self.assertEqual(self.pa.encode('Cunningham', 4), ('KNNK', ''))
        self.assertEqual(self.pa.encode('Curtis', 4), ('KRTS', ''))
        self.assertEqual(self.pa.encode('Cutha', 4), ('K0', 'KT'))
        self.assertEqual(self.pa.encode('Cutter', 4), ('KTR', ''))
        self.assertEqual(self.pa.encode('D\'Aubigny', 4), ('TPN', 'TPKN'))
        self.assertEqual(self.pa.encode('DAVIS', 4), ('TFS', ''))
        self.assertEqual(self.pa.encode('Dabinott', 4), ('TPNT', ''))
        self.assertEqual(self.pa.encode('Dacre', 4), ('TKR', ''))
        self.assertEqual(self.pa.encode('Daggett', 4), ('TKT', ''))
        self.assertEqual(self.pa.encode('Danvers', 4), ('TNFR', ''))
        self.assertEqual(self.pa.encode('Darcy', 4), ('TRS', ''))
        self.assertEqual(self.pa.encode('Davis', 4), ('TFS', ''))
        self.assertEqual(self.pa.encode('Dawn', 4), ('TN', ''))
        self.assertEqual(self.pa.encode('Dawson', 4), ('TSN', ''))
        self.assertEqual(self.pa.encode('Day', 4), ('T', ''))
        self.assertEqual(self.pa.encode('Daye', 4), ('T', ''))
        self.assertEqual(self.pa.encode('DeGrenier', 4), ('TKRN', ''))
        self.assertEqual(self.pa.encode('Dean', 4), ('TN', ''))
        self.assertEqual(self.pa.encode('Deekindaugh', 4), ('TKNT', ''))
        self.assertEqual(self.pa.encode('Dennis', 4), ('TNS', ''))
        self.assertEqual(self.pa.encode('Denny', 4), ('TN', ''))
        self.assertEqual(self.pa.encode('Denton', 4), ('TNTN', ''))
        self.assertEqual(self.pa.encode('Desborough', 4), ('TSPR', ''))
        self.assertEqual(self.pa.encode('Despenser', 4), ('TSPN', ''))
        self.assertEqual(self.pa.encode('Deverill', 4), ('TFRL', ''))
        self.assertEqual(self.pa.encode('Devine', 4), ('TFN', ''))
        self.assertEqual(self.pa.encode('Dexter', 4), ('TKST', ''))
        self.assertEqual(self.pa.encode('Dillaway', 4), ('TL', ''))
        self.assertEqual(self.pa.encode('Dimmick', 4), ('TMK', ''))
        self.assertEqual(self.pa.encode('Dinan', 4), ('TNN', ''))
        self.assertEqual(self.pa.encode('Dix', 4), ('TKS', ''))
        self.assertEqual(self.pa.encode('Doggett', 4), ('TKT', ''))
        self.assertEqual(self.pa.encode('Donahue', 4), ('TNH', ''))
        self.assertEqual(self.pa.encode('Dorfman', 4), ('TRFM', ''))
        self.assertEqual(self.pa.encode('Dorris', 4), ('TRS', ''))
        self.assertEqual(self.pa.encode('Dow', 4), ('T', 'TF'))
        self.assertEqual(self.pa.encode('Downey', 4), ('TN', ''))
        self.assertEqual(self.pa.encode('Downing', 4), ('TNNK', ''))
        self.assertEqual(self.pa.encode('Dowsett', 4), ('TST', ''))
        self.assertEqual(self.pa.encode('Duck?', 4), ('TK', ''))
        self.assertEqual(self.pa.encode('Dudley', 4), ('TTL', ''))
        self.assertEqual(self.pa.encode('Duffy', 4), ('TF', ''))
        self.assertEqual(self.pa.encode('Dunn', 4), ('TN', ''))
        self.assertEqual(self.pa.encode('Dunsterville', 4), ('TNST', ''))
        self.assertEqual(self.pa.encode('Durrant', 4), ('TRNT', ''))
        self.assertEqual(self.pa.encode('Durrin', 4), ('TRN', ''))
        self.assertEqual(self.pa.encode('Dustin', 4), ('TSTN', ''))
        self.assertEqual(self.pa.encode('Duston', 4), ('TSTN', ''))
        self.assertEqual(self.pa.encode('Eames', 4), ('AMS', ''))
        self.assertEqual(self.pa.encode('Early', 4), ('ARL', ''))
        self.assertEqual(self.pa.encode('Easty', 4), ('AST', ''))
        self.assertEqual(self.pa.encode('Ebbett', 4), ('APT', ''))
        self.assertEqual(self.pa.encode('Eberbach', 4), ('APRP', ''))
        self.assertEqual(self.pa.encode('Eberhard', 4), ('APRR', ''))
        self.assertEqual(self.pa.encode('Eddy', 4), ('AT', ''))
        self.assertEqual(self.pa.encode('Edenden', 4), ('ATNT', ''))
        self.assertEqual(self.pa.encode('Edwards', 4), ('ATRT', ''))
        self.assertEqual(self.pa.encode('Eglinton', 4), ('AKLN', 'ALNT'))
        self.assertEqual(self.pa.encode('Eliot', 4), ('ALT', ''))
        self.assertEqual(self.pa.encode('Elizabeth', 4), ('ALSP', ''))
        self.assertEqual(self.pa.encode('Ellis', 4), ('ALS', ''))
        self.assertEqual(self.pa.encode('Ellison', 4), ('ALSN', ''))
        self.assertEqual(self.pa.encode('Ellot', 4), ('ALT', ''))
        self.assertEqual(self.pa.encode('Elny', 4), ('ALN', ''))
        self.assertEqual(self.pa.encode('Elsner', 4), ('ALSN', ''))
        self.assertEqual(self.pa.encode('Emerson', 4), ('AMRS', ''))
        self.assertEqual(self.pa.encode('Empson', 4), ('AMPS', ''))
        self.assertEqual(self.pa.encode('Est', 4), ('AST', ''))
        self.assertEqual(self.pa.encode('Estabrook', 4), ('ASTP', ''))
        self.assertEqual(self.pa.encode('Estes', 4), ('ASTS', ''))
        self.assertEqual(self.pa.encode('Estey', 4), ('AST', ''))
        self.assertEqual(self.pa.encode('Evans', 4), ('AFNS', ''))
        self.assertEqual(self.pa.encode('Fallowell', 4), ('FLL', ''))
        self.assertEqual(self.pa.encode('Farnsworth', 4), ('FRNS', ''))
        self.assertEqual(self.pa.encode('Feake', 4), ('FK', ''))
        self.assertEqual(self.pa.encode('Feke', 4), ('FK', ''))
        self.assertEqual(self.pa.encode('Fellows', 4), ('FLS', ''))
        self.assertEqual(self.pa.encode('Fettiplace', 4), ('FTPL', ''))
        self.assertEqual(self.pa.encode('Finney', 4), ('FN', ''))
        self.assertEqual(self.pa.encode('Fischer', 4), ('FXR', 'FSKR'))
        self.assertEqual(self.pa.encode('Fisher', 4), ('FXR', ''))
        self.assertEqual(self.pa.encode('Fisk', 4), ('FSK', ''))
        self.assertEqual(self.pa.encode('Fiske', 4), ('FSK', ''))
        self.assertEqual(self.pa.encode('Fletcher', 4), ('FLXR', ''))
        self.assertEqual(self.pa.encode('Folger', 4), ('FLKR', 'FLJR'))
        self.assertEqual(self.pa.encode('Foliot', 4), ('FLT', ''))
        self.assertEqual(self.pa.encode('Folyot', 4), ('FLT', ''))
        self.assertEqual(self.pa.encode('Fones', 4), ('FNS', ''))
        self.assertEqual(self.pa.encode('Fordham', 4), ('FRTM', ''))
        self.assertEqual(self.pa.encode('Forstner', 4), ('FRST', ''))
        self.assertEqual(self.pa.encode('Fosten', 4), ('FSTN', ''))
        self.assertEqual(self.pa.encode('Foster', 4), ('FSTR', ''))
        self.assertEqual(self.pa.encode('Foulke', 4), ('FLK', ''))
        self.assertEqual(self.pa.encode('Fowler', 4), ('FLR', ''))
        self.assertEqual(self.pa.encode('Foxwell', 4), ('FKSL', ''))
        self.assertEqual(self.pa.encode('Fraley', 4), ('FRL', ''))
        self.assertEqual(self.pa.encode('Franceys', 4), ('FRNS', ''))
        self.assertEqual(self.pa.encode('Franke', 4), ('FRNK', ''))
        self.assertEqual(self.pa.encode('Frascella', 4), ('FRSL', ''))
        self.assertEqual(self.pa.encode('Frazer', 4), ('FRSR', ''))
        self.assertEqual(self.pa.encode('Fredd', 4), ('FRT', ''))
        self.assertEqual(self.pa.encode('Freeman', 4), ('FRMN', ''))
        self.assertEqual(self.pa.encode('French', 4), ('FRNX', 'FRNK'))
        self.assertEqual(self.pa.encode('Freville', 4), ('FRFL', ''))
        self.assertEqual(self.pa.encode('Frey', 4), ('FR', ''))
        self.assertEqual(self.pa.encode('Frick', 4), ('FRK', ''))
        self.assertEqual(self.pa.encode('Frier', 4), ('FR', 'FRR'))
        self.assertEqual(self.pa.encode('Froe', 4), ('FR', ''))
        self.assertEqual(self.pa.encode('Frorer', 4), ('FRRR', ''))
        self.assertEqual(self.pa.encode('Frost', 4), ('FRST', ''))
        self.assertEqual(self.pa.encode('Frothingham', 4), ('FR0N', 'FRTN'))
        self.assertEqual(self.pa.encode('Fry', 4), ('FR', ''))
        self.assertEqual(self.pa.encode('Gaffney', 4), ('KFN', ''))
        self.assertEqual(self.pa.encode('Gage', 4), ('KJ', 'KK'))
        self.assertEqual(self.pa.encode('Gallion', 4), ('KLN', ''))
        self.assertEqual(self.pa.encode('Gallishan', 4), ('KLXN', ''))
        self.assertEqual(self.pa.encode('Gamble', 4), ('KMPL', ''))
        self.assertEqual(self.pa.encode('Garbrand', 4), ('KRPR', ''))
        self.assertEqual(self.pa.encode('Gardner', 4), ('KRTN', ''))
        self.assertEqual(self.pa.encode('Garrett', 4), ('KRT', ''))
        self.assertEqual(self.pa.encode('Gassner', 4), ('KSNR', ''))
        self.assertEqual(self.pa.encode('Gater', 4), ('KTR', ''))
        self.assertEqual(self.pa.encode('Gaunt', 4), ('KNT', ''))
        self.assertEqual(self.pa.encode('Gayer', 4), ('KR', ''))
        self.assertEqual(self.pa.encode('Gerken', 4), ('KRKN', 'JRKN'))
        self.assertEqual(self.pa.encode('Gerritsen', 4), ('KRTS', 'JRTS'))
        self.assertEqual(self.pa.encode('Gibbs', 4), ('KPS', 'JPS'))
        self.assertEqual(self.pa.encode('Giffard', 4), ('JFRT', 'KFRT'))
        self.assertEqual(self.pa.encode('Gilbert', 4), ('KLPR', 'JLPR'))
        self.assertEqual(self.pa.encode('Gill', 4), ('KL', 'JL'))
        self.assertEqual(self.pa.encode('Gilman', 4), ('KLMN', 'JLMN'))
        self.assertEqual(self.pa.encode('Glass', 4), ('KLS', ''))
        self.assertEqual(self.pa.encode('GoddardGifford', 4), ('KTRJ', ''))
        self.assertEqual(self.pa.encode('Godfrey', 4), ('KTFR', ''))
        self.assertEqual(self.pa.encode('Godwin', 4), ('KTN', ''))
        self.assertEqual(self.pa.encode('Goodale', 4), ('KTL', ''))
        self.assertEqual(self.pa.encode('Goodnow', 4), ('KTN', 'KTNF'))
        self.assertEqual(self.pa.encode('Gorham', 4), ('KRM', ''))
        self.assertEqual(self.pa.encode('Goseline', 4), ('KSLN', ''))
        self.assertEqual(self.pa.encode('Gott', 4), ('KT', ''))
        self.assertEqual(self.pa.encode('Gould', 4), ('KLT', ''))
        self.assertEqual(self.pa.encode('Grafton', 4), ('KRFT', ''))
        self.assertEqual(self.pa.encode('Grant', 4), ('KRNT', ''))
        self.assertEqual(self.pa.encode('Gray', 4), ('KR', ''))
        self.assertEqual(self.pa.encode('Green', 4), ('KRN', ''))
        self.assertEqual(self.pa.encode('Griffin', 4), ('KRFN', ''))
        self.assertEqual(self.pa.encode('Grill', 4), ('KRL', ''))
        self.assertEqual(self.pa.encode('Grim', 4), ('KRM', ''))
        self.assertEqual(self.pa.encode('Grisgonelle', 4), ('KRSK', ''))
        self.assertEqual(self.pa.encode('Gross', 4), ('KRS', ''))
        self.assertEqual(self.pa.encode('Guba', 4), ('KP', ''))
        self.assertEqual(self.pa.encode('Gybbes', 4), ('KPS', 'JPS'))
        self.assertEqual(self.pa.encode('Haburne', 4), ('HPRN', ''))
        self.assertEqual(self.pa.encode('Hackburne', 4), ('HKPR', ''))
        self.assertEqual(self.pa.encode('Haddon?', 4), ('HTN', ''))
        self.assertEqual(self.pa.encode('Haines', 4), ('HNS', ''))
        self.assertEqual(self.pa.encode('Hale', 4), ('HL', ''))
        self.assertEqual(self.pa.encode('Hall', 4), ('HL', ''))
        self.assertEqual(self.pa.encode('Hallet', 4), ('HLT', ''))
        self.assertEqual(self.pa.encode('Hallock', 4), ('HLK', ''))
        self.assertEqual(self.pa.encode('Halstead', 4), ('HLST', ''))
        self.assertEqual(self.pa.encode('Hammond', 4), ('HMNT', ''))
        self.assertEqual(self.pa.encode('Hance', 4), ('HNS', ''))
        self.assertEqual(self.pa.encode('Handy', 4), ('HNT', ''))
        self.assertEqual(self.pa.encode('Hanson', 4), ('HNSN', ''))
        self.assertEqual(self.pa.encode('Harasek', 4), ('HRSK', ''))
        self.assertEqual(self.pa.encode('Harcourt', 4), ('HRKR', ''))
        self.assertEqual(self.pa.encode('Hardy', 4), ('HRT', ''))
        self.assertEqual(self.pa.encode('Harlock', 4), ('HRLK', ''))
        self.assertEqual(self.pa.encode('Harris', 4), ('HRS', ''))
        self.assertEqual(self.pa.encode('Hartley', 4), ('HRTL', ''))
        self.assertEqual(self.pa.encode('Harvey', 4), ('HRF', ''))
        self.assertEqual(self.pa.encode('Harvie', 4), ('HRF', ''))
        self.assertEqual(self.pa.encode('Harwood', 4), ('HRT', ''))
        self.assertEqual(self.pa.encode('Hathaway', 4), ('H0', 'HT'))
        self.assertEqual(self.pa.encode('Haukeness', 4), ('HKNS', ''))
        self.assertEqual(self.pa.encode('Hawkes', 4), ('HKS', ''))
        self.assertEqual(self.pa.encode('Hawkhurst', 4), ('HKRS', ''))
        self.assertEqual(self.pa.encode('Hawkins', 4), ('HKNS', ''))
        self.assertEqual(self.pa.encode('Hawley', 4), ('HL', ''))
        self.assertEqual(self.pa.encode('Heald', 4), ('HLT', ''))
        self.assertEqual(self.pa.encode('Helsdon', 4), ('HLST', ''))
        self.assertEqual(self.pa.encode('Hemenway', 4), ('HMN', ''))
        self.assertEqual(self.pa.encode('Hemmenway', 4), ('HMN', ''))
        self.assertEqual(self.pa.encode('Henck', 4), ('HNK', ''))
        self.assertEqual(self.pa.encode('Henderson', 4), ('HNTR', ''))
        self.assertEqual(self.pa.encode('Hendricks', 4), ('HNTR', ''))
        self.assertEqual(self.pa.encode('Hersey', 4), ('HRS', ''))
        self.assertEqual(self.pa.encode('Hewes', 4), ('HS', ''))
        self.assertEqual(self.pa.encode('Heyman', 4), ('HMN', ''))
        self.assertEqual(self.pa.encode('Hicks', 4), ('HKS', ''))
        self.assertEqual(self.pa.encode('Hidden', 4), ('HTN', ''))
        self.assertEqual(self.pa.encode('Higgs', 4), ('HKS', ''))
        self.assertEqual(self.pa.encode('Hill', 4), ('HL', ''))
        self.assertEqual(self.pa.encode('Hills', 4), ('HLS', ''))
        self.assertEqual(self.pa.encode('Hinckley', 4), ('HNKL', ''))
        self.assertEqual(self.pa.encode('Hipwell', 4), ('HPL', ''))
        self.assertEqual(self.pa.encode('Hobart', 4), ('HPRT', ''))
        self.assertEqual(self.pa.encode('Hoben', 4), ('HPN', ''))
        self.assertEqual(self.pa.encode('Hoffmann', 4), ('HFMN', ''))
        self.assertEqual(self.pa.encode('Hogan', 4), ('HKN', ''))
        self.assertEqual(self.pa.encode('Holmes', 4), ('HLMS', ''))
        self.assertEqual(self.pa.encode('Hoo', 4), ('H', ''))
        self.assertEqual(self.pa.encode('Hooker', 4), ('HKR', ''))
        self.assertEqual(self.pa.encode('Hopcott', 4), ('HPKT', ''))
        self.assertEqual(self.pa.encode('Hopkins', 4), ('HPKN', ''))
        self.assertEqual(self.pa.encode('Hopkinson', 4), ('HPKN', ''))
        self.assertEqual(self.pa.encode('Hornsey', 4), ('HRNS', ''))
        self.assertEqual(self.pa.encode('Houckgeest', 4), ('HKJS', 'HKKS'))
        self.assertEqual(self.pa.encode('Hough', 4), ('H', ''))
        self.assertEqual(self.pa.encode('Houstin', 4), ('HSTN', ''))
        self.assertEqual(self.pa.encode('How', 4), ('H', 'HF'))
        self.assertEqual(self.pa.encode('Howe', 4), ('H', ''))
        self.assertEqual(self.pa.encode('Howland', 4), ('HLNT', ''))
        self.assertEqual(self.pa.encode('Hubner', 4), ('HPNR', ''))
        self.assertEqual(self.pa.encode('Hudnut', 4), ('HTNT', ''))
        self.assertEqual(self.pa.encode('Hughes', 4), ('HS', ''))
        self.assertEqual(self.pa.encode('Hull', 4), ('HL', ''))
        self.assertEqual(self.pa.encode('Hulme', 4), ('HLM', ''))
        self.assertEqual(self.pa.encode('Hume', 4), ('HM', ''))
        self.assertEqual(self.pa.encode('Hundertumark', 4), ('HNTR', ''))
        self.assertEqual(self.pa.encode('Hundley', 4), ('HNTL', ''))
        self.assertEqual(self.pa.encode('Hungerford', 4), ('HNKR', 'HNJR'))
        self.assertEqual(self.pa.encode('Hunt', 4), ('HNT', ''))
        self.assertEqual(self.pa.encode('Hurst', 4), ('HRST', ''))
        self.assertEqual(self.pa.encode('Husbands', 4), ('HSPN', ''))
        self.assertEqual(self.pa.encode('Hussey', 4), ('HS', ''))
        self.assertEqual(self.pa.encode('Husted', 4), ('HSTT', ''))
        self.assertEqual(self.pa.encode('Hutchins', 4), ('HXNS', ''))
        self.assertEqual(self.pa.encode('Hutchinson', 4), ('HXNS', ''))
        self.assertEqual(self.pa.encode('Huttinger', 4), ('HTNK', 'HTNJ'))
        self.assertEqual(self.pa.encode('Huybertsen', 4), ('HPRT', ''))
        self.assertEqual(self.pa.encode('Iddenden', 4), ('ATNT', ''))
        self.assertEqual(self.pa.encode('Ingraham', 4), ('ANKR', ''))
        self.assertEqual(self.pa.encode('Ives', 4), ('AFS', ''))
        self.assertEqual(self.pa.encode('Jackson', 4), ('JKSN', 'AKSN'))
        self.assertEqual(self.pa.encode('Jacob', 4), ('JKP', 'AKP'))
        self.assertEqual(self.pa.encode('Jans', 4), ('JNS', 'ANS'))
        self.assertEqual(self.pa.encode('Jenkins', 4), ('JNKN', 'ANKN'))
        self.assertEqual(self.pa.encode('Jewett', 4), ('JT', 'AT'))
        self.assertEqual(self.pa.encode('Jewitt', 4), ('JT', 'AT'))
        self.assertEqual(self.pa.encode('Johnson', 4), ('JNSN', 'ANSN'))
        self.assertEqual(self.pa.encode('Jones', 4), ('JNS', 'ANS'))
        self.assertEqual(self.pa.encode('Josephine', 4), ('JSFN', 'HSFN'))
        self.assertEqual(self.pa.encode('Judd', 4), ('JT', 'AT'))
        self.assertEqual(self.pa.encode('June', 4), ('JN', 'AN'))
        self.assertEqual(self.pa.encode('Kamarowska', 4), ('KMRS', ''))
        self.assertEqual(self.pa.encode('Kay', 4), ('K', ''))
        self.assertEqual(self.pa.encode('Kelley', 4), ('KL', ''))
        self.assertEqual(self.pa.encode('Kelly', 4), ('KL', ''))
        self.assertEqual(self.pa.encode('Keymber', 4), ('KMPR', ''))
        self.assertEqual(self.pa.encode('Keynes', 4), ('KNS', ''))
        self.assertEqual(self.pa.encode('Kilham', 4), ('KLM', ''))
        self.assertEqual(self.pa.encode('Kim', 4), ('KM', ''))
        self.assertEqual(self.pa.encode('Kimball', 4), ('KMPL', ''))
        self.assertEqual(self.pa.encode('King', 4), ('KNK', ''))
        self.assertEqual(self.pa.encode('Kinsey', 4), ('KNS', ''))
        self.assertEqual(self.pa.encode('Kirk', 4), ('KRK', ''))
        self.assertEqual(self.pa.encode('Kirton', 4), ('KRTN', ''))
        self.assertEqual(self.pa.encode('Kistler', 4), ('KSTL', ''))
        self.assertEqual(self.pa.encode('Kitchen', 4), ('KXN', ''))
        self.assertEqual(self.pa.encode('Kitson', 4), ('KTSN', ''))
        self.assertEqual(self.pa.encode('Klett', 4), ('KLT', ''))
        self.assertEqual(self.pa.encode('Kline', 4), ('KLN', ''))
        self.assertEqual(self.pa.encode('Knapp', 4), ('NP', ''))
        self.assertEqual(self.pa.encode('Knight', 4), ('NT', ''))
        self.assertEqual(self.pa.encode('Knote', 4), ('NT', ''))
        self.assertEqual(self.pa.encode('Knott', 4), ('NT', ''))
        self.assertEqual(self.pa.encode('Knox', 4), ('NKS', ''))
        self.assertEqual(self.pa.encode('Koeller', 4), ('KLR', ''))
        self.assertEqual(self.pa.encode('La Pointe', 4), ('LPNT', ''))
        self.assertEqual(self.pa.encode('LaPlante', 4), ('LPLN', ''))
        self.assertEqual(self.pa.encode('Laimbeer', 4), ('LMPR', ''))
        self.assertEqual(self.pa.encode('Lamb', 4), ('LMP', ''))
        self.assertEqual(self.pa.encode('Lambertson', 4), ('LMPR', ''))
        self.assertEqual(self.pa.encode('Lancto', 4), ('LNKT', ''))
        self.assertEqual(self.pa.encode('Landry', 4), ('LNTR', ''))
        self.assertEqual(self.pa.encode('Lane', 4), ('LN', ''))
        self.assertEqual(self.pa.encode('Langendyck', 4), ('LNJN', 'LNKN'))
        self.assertEqual(self.pa.encode('Langer', 4), ('LNKR', 'LNJR'))
        self.assertEqual(self.pa.encode('Langford', 4), ('LNKF', ''))
        self.assertEqual(self.pa.encode('Lantersee', 4), ('LNTR', ''))
        self.assertEqual(self.pa.encode('Laquer', 4), ('LKR', ''))
        self.assertEqual(self.pa.encode('Larkin', 4), ('LRKN', ''))
        self.assertEqual(self.pa.encode('Latham', 4), ('LTM', ''))
        self.assertEqual(self.pa.encode('Lathrop', 4), ('L0RP', 'LTRP'))
        self.assertEqual(self.pa.encode('Lauter', 4), ('LTR', ''))
        self.assertEqual(self.pa.encode('Lawrence', 4), ('LRNS', ''))
        self.assertEqual(self.pa.encode('Leach', 4), ('LK', ''))
        self.assertEqual(self.pa.encode('Leager', 4), ('LKR', 'LJR'))
        self.assertEqual(self.pa.encode('Learned', 4), ('LRNT', ''))
        self.assertEqual(self.pa.encode('Leavitt', 4), ('LFT', ''))
        self.assertEqual(self.pa.encode('Lee', 4), ('L', ''))
        self.assertEqual(self.pa.encode('Leete', 4), ('LT', ''))
        self.assertEqual(self.pa.encode('Leggett', 4), ('LKT', ''))
        self.assertEqual(self.pa.encode('Leland', 4), ('LLNT', ''))
        self.assertEqual(self.pa.encode('Leonard', 4), ('LNRT', ''))
        self.assertEqual(self.pa.encode('Lester', 4), ('LSTR', ''))
        self.assertEqual(self.pa.encode('Lestrange', 4), ('LSTR', ''))
        self.assertEqual(self.pa.encode('Lethem', 4), ('L0M', 'LTM'))
        self.assertEqual(self.pa.encode('Levine', 4), ('LFN', ''))
        self.assertEqual(self.pa.encode('Lewes', 4), ('LS', ''))
        self.assertEqual(self.pa.encode('Lewis', 4), ('LS', ''))
        self.assertEqual(self.pa.encode('Lincoln', 4), ('LNKL', ''))
        self.assertEqual(self.pa.encode('Lindsey', 4), ('LNTS', ''))
        self.assertEqual(self.pa.encode('Linher', 4), ('LNR', ''))
        self.assertEqual(self.pa.encode('Lippet', 4), ('LPT', ''))
        self.assertEqual(self.pa.encode('Lippincott', 4), ('LPNK', ''))
        self.assertEqual(self.pa.encode('Lockwood', 4), ('LKT', ''))
        self.assertEqual(self.pa.encode('Loines', 4), ('LNS', ''))
        self.assertEqual(self.pa.encode('Lombard', 4), ('LMPR', ''))
        self.assertEqual(self.pa.encode('Long', 4), ('LNK', ''))
        self.assertEqual(self.pa.encode('Longespee', 4), ('LNJS', 'LNKS'))
        self.assertEqual(self.pa.encode('Look', 4), ('LK', ''))
        self.assertEqual(self.pa.encode('Lounsberry', 4), ('LNSP', ''))
        self.assertEqual(self.pa.encode('Lounsbury', 4), ('LNSP', ''))
        self.assertEqual(self.pa.encode('Louthe', 4), ('L0', 'LT'))
        self.assertEqual(self.pa.encode('Loveyne', 4), ('LFN', ''))
        self.assertEqual(self.pa.encode('Lowe', 4), ('L', ''))
        self.assertEqual(self.pa.encode('Ludlam', 4), ('LTLM', ''))
        self.assertEqual(self.pa.encode('Lumbard', 4), ('LMPR', ''))
        self.assertEqual(self.pa.encode('Lund', 4), ('LNT', ''))
        self.assertEqual(self.pa.encode('Luno', 4), ('LN', ''))
        self.assertEqual(self.pa.encode('Lutz', 4), ('LTS', ''))
        self.assertEqual(self.pa.encode('Lydia', 4), ('LT', ''))
        self.assertEqual(self.pa.encode('Lynne', 4), ('LN', ''))
        self.assertEqual(self.pa.encode('Lyon', 4), ('LN', ''))
        self.assertEqual(self.pa.encode('MacAlpin', 4), ('MKLP', ''))
        self.assertEqual(self.pa.encode('MacBricc', 4), ('MKPR', ''))
        self.assertEqual(self.pa.encode('MacCrinan', 4), ('MKRN', ''))
        self.assertEqual(self.pa.encode('MacKenneth', 4), ('MKN0', 'MKNT'))
        self.assertEqual(self.pa.encode('MacMael nam Bo', 4), ('MKML', ''))
        self.assertEqual(self.pa.encode('MacMurchada', 4), ('MKMR', ''))
        self.assertEqual(self.pa.encode('Macomber', 4), ('MKMP', ''))
        self.assertEqual(self.pa.encode('Macy', 4), ('MS', ''))
        self.assertEqual(self.pa.encode('Magnus', 4), ('MNS', 'MKNS'))
        self.assertEqual(self.pa.encode('Mahien', 4), ('MHN', ''))
        self.assertEqual(self.pa.encode('Malmains', 4), ('MLMN', ''))
        self.assertEqual(self.pa.encode('Malory', 4), ('MLR', ''))
        self.assertEqual(self.pa.encode('Mancinelli', 4), ('MNSN', ''))
        self.assertEqual(self.pa.encode('Mancini', 4), ('MNSN', ''))
        self.assertEqual(self.pa.encode('Mann', 4), ('MN', ''))
        self.assertEqual(self.pa.encode('Manning', 4), ('MNNK', ''))
        self.assertEqual(self.pa.encode('Manter', 4), ('MNTR', ''))
        self.assertEqual(self.pa.encode('Marion', 4), ('MRN', ''))
        self.assertEqual(self.pa.encode('Marley', 4), ('MRL', ''))
        self.assertEqual(self.pa.encode('Marmion', 4), ('MRMN', ''))
        self.assertEqual(self.pa.encode('Marquart', 4), ('MRKR', ''))
        self.assertEqual(self.pa.encode('Marsh', 4), ('MRX', ''))
        self.assertEqual(self.pa.encode('Marshal', 4), ('MRXL', ''))
        self.assertEqual(self.pa.encode('Marshall', 4), ('MRXL', ''))
        self.assertEqual(self.pa.encode('Martel', 4), ('MRTL', ''))
        self.assertEqual(self.pa.encode('Martha', 4), ('MR0', 'MRT'))
        self.assertEqual(self.pa.encode('Martin', 4), ('MRTN', ''))
        self.assertEqual(self.pa.encode('Marturano', 4), ('MRTR', ''))
        self.assertEqual(self.pa.encode('Marvin', 4), ('MRFN', ''))
        self.assertEqual(self.pa.encode('Mary', 4), ('MR', ''))
        self.assertEqual(self.pa.encode('Mason', 4), ('MSN', ''))
        self.assertEqual(self.pa.encode('Maxwell', 4), ('MKSL', ''))
        self.assertEqual(self.pa.encode('Mayhew', 4), ('MH', 'MHF'))
        self.assertEqual(self.pa.encode('McAllaster', 4), ('MKLS', ''))
        self.assertEqual(self.pa.encode('McAllister', 4), ('MKLS', ''))
        self.assertEqual(self.pa.encode('McConnell', 4), ('MKNL', ''))
        self.assertEqual(self.pa.encode('McFarland', 4), ('MKFR', ''))
        self.assertEqual(self.pa.encode('McIlroy', 4), ('MSLR', ''))
        self.assertEqual(self.pa.encode('McNair', 4), ('MKNR', ''))
        self.assertEqual(self.pa.encode('McNair-Landry', 4), ('MKNR', ''))
        self.assertEqual(self.pa.encode('McRaven', 4), ('MKRF', ''))
        self.assertEqual(self.pa.encode('Mead', 4), ('MT', ''))
        self.assertEqual(self.pa.encode('Meade', 4), ('MT', ''))
        self.assertEqual(self.pa.encode('Meck', 4), ('MK', ''))
        self.assertEqual(self.pa.encode('Melton', 4), ('MLTN', ''))
        self.assertEqual(self.pa.encode('Mendenhall', 4), ('MNTN', ''))
        self.assertEqual(self.pa.encode('Mering', 4), ('MRNK', ''))
        self.assertEqual(self.pa.encode('Merrick', 4), ('MRK', ''))
        self.assertEqual(self.pa.encode('Merry', 4), ('MR', ''))
        self.assertEqual(self.pa.encode('Mighill', 4), ('ML', ''))
        self.assertEqual(self.pa.encode('Miller', 4), ('MLR', ''))
        self.assertEqual(self.pa.encode('Milton', 4), ('MLTN', ''))
        self.assertEqual(self.pa.encode('Mohun', 4), ('MHN', ''))
        self.assertEqual(self.pa.encode('Montague', 4), ('MNTK', ''))
        self.assertEqual(self.pa.encode('Montboucher', 4), ('MNTP', ''))
        self.assertEqual(self.pa.encode('Moore', 4), ('MR', ''))
        self.assertEqual(self.pa.encode('Morrel', 4), ('MRL', ''))
        self.assertEqual(self.pa.encode('Morrill', 4), ('MRL', ''))
        self.assertEqual(self.pa.encode('Morris', 4), ('MRS', ''))
        self.assertEqual(self.pa.encode('Morton', 4), ('MRTN', ''))
        self.assertEqual(self.pa.encode('Moton', 4), ('MTN', ''))
        self.assertEqual(self.pa.encode('Muir', 4), ('MR', ''))
        self.assertEqual(self.pa.encode('Mulferd', 4), ('MLFR', ''))
        self.assertEqual(self.pa.encode('Mullins', 4), ('MLNS', ''))
        self.assertEqual(self.pa.encode('Mulso', 4), ('MLS', ''))
        self.assertEqual(self.pa.encode('Munger', 4), ('MNKR', 'MNJR'))
        self.assertEqual(self.pa.encode('Munt', 4), ('MNT', ''))
        self.assertEqual(self.pa.encode('Murchad', 4), ('MRXT', 'MRKT'))
        self.assertEqual(self.pa.encode('Murdock', 4), ('MRTK', ''))
        self.assertEqual(self.pa.encode('Murray', 4), ('MR', ''))
        self.assertEqual(self.pa.encode('Muskett', 4), ('MSKT', ''))
        self.assertEqual(self.pa.encode('Myers', 4), ('MRS', ''))
        self.assertEqual(self.pa.encode('Myrick', 4), ('MRK', ''))
        self.assertEqual(self.pa.encode('NORRIS', 4), ('NRS', ''))
        self.assertEqual(self.pa.encode('Nayle', 4), ('NL', ''))
        self.assertEqual(self.pa.encode('Newcomb', 4), ('NKMP', ''))
        self.assertEqual(self.pa.encode('Newcomb(e)', 4), ('NKMP', ''))
        self.assertEqual(self.pa.encode('Newkirk', 4), ('NKRK', ''))
        self.assertEqual(self.pa.encode('Newton', 4), ('NTN', ''))
        self.assertEqual(self.pa.encode('Niles', 4), ('NLS', ''))
        self.assertEqual(self.pa.encode('Noble', 4), ('NPL', ''))
        self.assertEqual(self.pa.encode('Noel', 4), ('NL', ''))
        self.assertEqual(self.pa.encode('Northend', 4), ('NR0N', 'NRTN'))
        self.assertEqual(self.pa.encode('Norton', 4), ('NRTN', ''))
        self.assertEqual(self.pa.encode('Nutter', 4), ('NTR', ''))
        self.assertEqual(self.pa.encode('Odding', 4), ('ATNK', ''))
        self.assertEqual(self.pa.encode('Odenbaugh', 4), ('ATNP', ''))
        self.assertEqual(self.pa.encode('Ogborn', 4), ('AKPR', ''))
        self.assertEqual(self.pa.encode('Oppenheimer', 4), ('APNM', ''))
        self.assertEqual(self.pa.encode('Otis', 4), ('ATS', ''))
        self.assertEqual(self.pa.encode('Oviatt', 4), ('AFT', ''))
        self.assertEqual(self.pa.encode('PRUST?', 4), ('PRST', ''))
        self.assertEqual(self.pa.encode('Paddock', 4), ('PTK', ''))
        self.assertEqual(self.pa.encode('Page', 4), ('PJ', 'PK'))
        self.assertEqual(self.pa.encode('Paine', 4), ('PN', ''))
        self.assertEqual(self.pa.encode('Paist', 4), ('PST', ''))
        self.assertEqual(self.pa.encode('Palmer', 4), ('PLMR', ''))
        self.assertEqual(self.pa.encode('Park', 4), ('PRK', ''))
        self.assertEqual(self.pa.encode('Parker', 4), ('PRKR', ''))
        self.assertEqual(self.pa.encode('Parkhurst', 4), ('PRKR', ''))
        self.assertEqual(self.pa.encode('Parrat', 4), ('PRT', ''))
        self.assertEqual(self.pa.encode('Parsons', 4), ('PRSN', ''))
        self.assertEqual(self.pa.encode('Partridge', 4), ('PRTR', ''))
        self.assertEqual(self.pa.encode('Pashley', 4), ('PXL', ''))
        self.assertEqual(self.pa.encode('Pasley', 4), ('PSL', ''))
        self.assertEqual(self.pa.encode('Patrick', 4), ('PTRK', ''))
        self.assertEqual(self.pa.encode('Pattee', 4), ('PT', ''))
        self.assertEqual(self.pa.encode('Patten', 4), ('PTN', ''))
        self.assertEqual(self.pa.encode('Pawley', 4), ('PL', ''))
        self.assertEqual(self.pa.encode('Payne', 4), ('PN', ''))
        self.assertEqual(self.pa.encode('Peabody', 4), ('PPT', ''))
        self.assertEqual(self.pa.encode('Peake', 4), ('PK', ''))
        self.assertEqual(self.pa.encode('Pearson', 4), ('PRSN', ''))
        self.assertEqual(self.pa.encode('Peat', 4), ('PT', ''))
        self.assertEqual(self.pa.encode('Pedersen', 4), ('PTRS', ''))
        self.assertEqual(self.pa.encode('Percy', 4), ('PRS', ''))
        self.assertEqual(self.pa.encode('Perkins', 4), ('PRKN', ''))
        self.assertEqual(self.pa.encode('Perrine', 4), ('PRN', ''))
        self.assertEqual(self.pa.encode('Perry', 4), ('PR', ''))
        self.assertEqual(self.pa.encode('Peson', 4), ('PSN', ''))
        self.assertEqual(self.pa.encode('Peterson', 4), ('PTRS', ''))
        self.assertEqual(self.pa.encode('Peyton', 4), ('PTN', ''))
        self.assertEqual(self.pa.encode('Phinney', 4), ('FN', ''))
        self.assertEqual(self.pa.encode('Pickard', 4), ('PKRT', ''))
        self.assertEqual(self.pa.encode('Pierce', 4), ('PRS', ''))
        self.assertEqual(self.pa.encode('Pierrepont', 4), ('PRPN', ''))
        self.assertEqual(self.pa.encode('Pike', 4), ('PK', ''))
        self.assertEqual(self.pa.encode('Pinkham', 4), ('PNKM', ''))
        self.assertEqual(self.pa.encode('Pitman', 4), ('PTMN', ''))
        self.assertEqual(self.pa.encode('Pitt', 4), ('PT', ''))
        self.assertEqual(self.pa.encode('Pitts', 4), ('PTS', ''))
        self.assertEqual(self.pa.encode('Plantagenet', 4), ('PLNT', ''))
        self.assertEqual(self.pa.encode('Platt', 4), ('PLT', ''))
        self.assertEqual(self.pa.encode('Platts', 4), ('PLTS', ''))
        self.assertEqual(self.pa.encode('Pleis', 4), ('PLS', ''))
        self.assertEqual(self.pa.encode('Pleiss', 4), ('PLS', ''))
        self.assertEqual(self.pa.encode('Plisko', 4), ('PLSK', ''))
        self.assertEqual(self.pa.encode('Pliskovitch', 4), ('PLSK', ''))
        self.assertEqual(self.pa.encode('Plum', 4), ('PLM', ''))
        self.assertEqual(self.pa.encode('Plume', 4), ('PLM', ''))
        self.assertEqual(self.pa.encode('Poitou', 4), ('PT', ''))
        self.assertEqual(self.pa.encode('Pomeroy', 4), ('PMR', ''))
        self.assertEqual(self.pa.encode('Poretiers', 4), ('PRTR', ''))
        self.assertEqual(self.pa.encode('Pote', 4), ('PT', ''))
        self.assertEqual(self.pa.encode('Potter', 4), ('PTR', ''))
        self.assertEqual(self.pa.encode('Potts', 4), ('PTS', ''))
        self.assertEqual(self.pa.encode('Powell', 4), ('PL', ''))
        self.assertEqual(self.pa.encode('Pratt', 4), ('PRT', ''))
        self.assertEqual(self.pa.encode('Presbury', 4), ('PRSP', ''))
        self.assertEqual(self.pa.encode('Priest', 4), ('PRST', ''))
        self.assertEqual(self.pa.encode('Prindle', 4), ('PRNT', ''))
        self.assertEqual(self.pa.encode('Prior', 4), ('PRR', ''))
        self.assertEqual(self.pa.encode('Profumo', 4), ('PRFM', ''))
        self.assertEqual(self.pa.encode('Purdy', 4), ('PRT', ''))
        self.assertEqual(self.pa.encode('Purefoy', 4), ('PRF', ''))
        self.assertEqual(self.pa.encode('Pury', 4), ('PR', ''))
        self.assertEqual(self.pa.encode('Quinter', 4), ('KNTR', ''))
        self.assertEqual(self.pa.encode('Rachel', 4), ('RXL', 'RKL'))
        self.assertEqual(self.pa.encode('Rand', 4), ('RNT', ''))
        self.assertEqual(self.pa.encode('Rankin', 4), ('RNKN', ''))
        self.assertEqual(self.pa.encode('Ravenscroft', 4), ('RFNS', ''))
        self.assertEqual(self.pa.encode('Raynsford', 4), ('RNSF', ''))
        self.assertEqual(self.pa.encode('Reakirt', 4), ('RKRT', ''))
        self.assertEqual(self.pa.encode('Reaves', 4), ('RFS', ''))
        self.assertEqual(self.pa.encode('Reeves', 4), ('RFS', ''))
        self.assertEqual(self.pa.encode('Reichert', 4), ('RXRT', 'RKRT'))
        self.assertEqual(self.pa.encode('Remmele', 4), ('RML', ''))
        self.assertEqual(self.pa.encode('Reynolds', 4), ('RNLT', ''))
        self.assertEqual(self.pa.encode('Rhodes', 4), ('RTS', ''))
        self.assertEqual(self.pa.encode('Richards', 4), ('RXRT', 'RKRT'))
        self.assertEqual(self.pa.encode('Richardson', 4), ('RXRT', 'RKRT'))
        self.assertEqual(self.pa.encode('Ring', 4), ('RNK', ''))
        self.assertEqual(self.pa.encode('Roberts', 4), ('RPRT', ''))
        self.assertEqual(self.pa.encode('Robertson', 4), ('RPRT', ''))
        self.assertEqual(self.pa.encode('Robson', 4), ('RPSN', ''))
        self.assertEqual(self.pa.encode('Rodie', 4), ('RT', ''))
        self.assertEqual(self.pa.encode('Rody', 4), ('RT', ''))
        self.assertEqual(self.pa.encode('Rogers', 4), ('RKRS', 'RJRS'))
        self.assertEqual(self.pa.encode('Ross', 4), ('RS', ''))
        self.assertEqual(self.pa.encode('Rosslevin', 4), ('RSLF', ''))
        self.assertEqual(self.pa.encode('Rowland', 4), ('RLNT', ''))
        self.assertEqual(self.pa.encode('Ruehl', 4), ('RL', ''))
        self.assertEqual(self.pa.encode('Russell', 4), ('RSL', ''))
        self.assertEqual(self.pa.encode('Ruth', 4), ('R0', 'RT'))
        self.assertEqual(self.pa.encode('Ryan', 4), ('RN', ''))
        self.assertEqual(self.pa.encode('Rysse', 4), ('RS', ''))
        self.assertEqual(self.pa.encode('Sadler', 4), ('STLR', ''))
        self.assertEqual(self.pa.encode('Salmon', 4), ('SLMN', ''))
        self.assertEqual(self.pa.encode('Salter', 4), ('SLTR', ''))
        self.assertEqual(self.pa.encode('Salvatore', 4), ('SLFT', ''))
        self.assertEqual(self.pa.encode('Sanders', 4), ('SNTR', ''))
        self.assertEqual(self.pa.encode('Sands', 4), ('SNTS', ''))
        self.assertEqual(self.pa.encode('Sanford', 4), ('SNFR', ''))
        self.assertEqual(self.pa.encode('Sanger', 4), ('SNKR', 'SNJR'))
        self.assertEqual(self.pa.encode('Sargent', 4), ('SRJN', 'SRKN'))
        self.assertEqual(self.pa.encode('Saunders', 4), ('SNTR', ''))
        self.assertEqual(self.pa.encode('Schilling', 4), ('XLNK', ''))
        self.assertEqual(self.pa.encode('Schlegel', 4), ('XLKL', 'SLKL'))
        self.assertEqual(self.pa.encode('Scott', 4), ('SKT', ''))
        self.assertEqual(self.pa.encode('Sears', 4), ('SRS', ''))
        self.assertEqual(self.pa.encode('Segersall', 4), ('SJRS', 'SKRS'))
        self.assertEqual(self.pa.encode('Senecal', 4), ('SNKL', ''))
        self.assertEqual(self.pa.encode('Sergeaux', 4), ('SRJ', 'SRK'))
        self.assertEqual(self.pa.encode('Severance', 4), ('SFRN', ''))
        self.assertEqual(self.pa.encode('Sharp', 4), ('XRP', ''))
        self.assertEqual(self.pa.encode('Sharpe', 4), ('XRP', ''))
        self.assertEqual(self.pa.encode('Sharply', 4), ('XRPL', ''))
        self.assertEqual(self.pa.encode('Shatswell', 4), ('XTSL', ''))
        self.assertEqual(self.pa.encode('Shattack', 4), ('XTK', ''))
        self.assertEqual(self.pa.encode('Shattock', 4), ('XTK', ''))
        self.assertEqual(self.pa.encode('Shattuck', 4), ('XTK', ''))
        self.assertEqual(self.pa.encode('Shaw', 4), ('X', 'XF'))
        self.assertEqual(self.pa.encode('Sheldon', 4), ('XLTN', ''))
        self.assertEqual(self.pa.encode('Sherman', 4), ('XRMN', ''))
        self.assertEqual(self.pa.encode('Shinn', 4), ('XN', ''))
        self.assertEqual(self.pa.encode('Shirford', 4), ('XRFR', ''))
        self.assertEqual(self.pa.encode('Shirley', 4), ('XRL', ''))
        self.assertEqual(self.pa.encode('Shively', 4), ('XFL', ''))
        self.assertEqual(self.pa.encode('Shoemaker', 4), ('XMKR', ''))
        self.assertEqual(self.pa.encode('Short', 4), ('XRT', ''))
        self.assertEqual(self.pa.encode('Shotwell', 4), ('XTL', ''))
        self.assertEqual(self.pa.encode('Shute', 4), ('XT', ''))
        self.assertEqual(self.pa.encode('Sibley', 4), ('SPL', ''))
        self.assertEqual(self.pa.encode('Silver', 4), ('SLFR', ''))
        self.assertEqual(self.pa.encode('Simes', 4), ('SMS', ''))
        self.assertEqual(self.pa.encode('Sinken', 4), ('SNKN', ''))
        self.assertEqual(self.pa.encode('Sinn', 4), ('SN', ''))
        self.assertEqual(self.pa.encode('Skelton', 4), ('SKLT', ''))
        self.assertEqual(self.pa.encode('Skiffe', 4), ('SKF', ''))
        self.assertEqual(self.pa.encode('Skotkonung', 4), ('SKTK', ''))
        self.assertEqual(self.pa.encode('Slade', 4), ('SLT', 'XLT'))
        self.assertEqual(self.pa.encode('Slye', 4), ('SL', 'XL'))
        self.assertEqual(self.pa.encode('Smedley', 4), ('SMTL', 'XMTL'))
        self.assertEqual(self.pa.encode('Smith', 4), ('SM0', 'XMT'))
        self.assertEqual(self.pa.encode('Snow', 4), ('SN', 'XNF'))
        self.assertEqual(self.pa.encode('Soole', 4), ('SL', ''))
        self.assertEqual(self.pa.encode('Soule', 4), ('SL', ''))
        self.assertEqual(self.pa.encode('Southworth', 4), ('S0R0', 'STRT'))
        self.assertEqual(self.pa.encode('Sowles', 4), ('SLS', ''))
        self.assertEqual(self.pa.encode('Spalding', 4), ('SPLT', ''))
        self.assertEqual(self.pa.encode('Spark', 4), ('SPRK', ''))
        self.assertEqual(self.pa.encode('Spencer', 4), ('SPNS', ''))
        self.assertEqual(self.pa.encode('Sperry', 4), ('SPR', ''))
        self.assertEqual(self.pa.encode('Spofford', 4), ('SPFR', ''))
        self.assertEqual(self.pa.encode('Spooner', 4), ('SPNR', ''))
        self.assertEqual(self.pa.encode('Sprague', 4), ('SPRK', ''))
        self.assertEqual(self.pa.encode('Springer', 4), ('SPRN', ''))
        self.assertEqual(self.pa.encode('St. Clair', 4), ('STKL', ''))
        self.assertEqual(self.pa.encode('St. Claire', 4), ('STKL', ''))
        self.assertEqual(self.pa.encode('St. Leger', 4), ('STLJ', 'STLK'))
        self.assertEqual(self.pa.encode('St. Omer', 4), ('STMR', ''))
        self.assertEqual(self.pa.encode('Stafferton', 4), ('STFR', ''))
        self.assertEqual(self.pa.encode('Stafford', 4), ('STFR', ''))
        self.assertEqual(self.pa.encode('Stalham', 4), ('STLM', ''))
        self.assertEqual(self.pa.encode('Stanford', 4), ('STNF', ''))
        self.assertEqual(self.pa.encode('Stanton', 4), ('STNT', ''))
        self.assertEqual(self.pa.encode('Star', 4), ('STR', ''))
        self.assertEqual(self.pa.encode('Starbuck', 4), ('STRP', ''))
        self.assertEqual(self.pa.encode('Starkey', 4), ('STRK', ''))
        self.assertEqual(self.pa.encode('Starkweather', 4), ('STRK', ''))
        self.assertEqual(self.pa.encode('Stearns', 4), ('STRN', ''))
        self.assertEqual(self.pa.encode('Stebbins', 4), ('STPN', ''))
        self.assertEqual(self.pa.encode('Steele', 4), ('STL', ''))
        self.assertEqual(self.pa.encode('Stephenson', 4), ('STFN', ''))
        self.assertEqual(self.pa.encode('Stevens', 4), ('STFN', ''))
        self.assertEqual(self.pa.encode('Stoddard', 4), ('STTR', ''))
        self.assertEqual(self.pa.encode('Stodder', 4), ('STTR', ''))
        self.assertEqual(self.pa.encode('Stone', 4), ('STN', ''))
        self.assertEqual(self.pa.encode('Storey', 4), ('STR', ''))
        self.assertEqual(self.pa.encode('Storrada', 4), ('STRT', ''))
        self.assertEqual(self.pa.encode('Story', 4), ('STR', ''))
        self.assertEqual(self.pa.encode('Stoughton', 4), ('STFT', ''))
        self.assertEqual(self.pa.encode('Stout', 4), ('STT', ''))
        self.assertEqual(self.pa.encode('Stow', 4), ('ST', 'STF'))
        self.assertEqual(self.pa.encode('Strong', 4), ('STRN', ''))
        self.assertEqual(self.pa.encode('Strutt', 4), ('STRT', ''))
        self.assertEqual(self.pa.encode('Stryker', 4), ('STRK', ''))
        self.assertEqual(self.pa.encode('Stuckeley', 4), ('STKL', ''))
        self.assertEqual(self.pa.encode('Sturges', 4), ('STRJ', 'STRK'))
        self.assertEqual(self.pa.encode('Sturgess', 4), ('STRJ', 'STRK'))
        self.assertEqual(self.pa.encode('Sturgis', 4), ('STRJ', 'STRK'))
        self.assertEqual(self.pa.encode('Suevain', 4), ('SFN', ''))
        self.assertEqual(self.pa.encode('Sulyard', 4), ('SLRT', ''))
        self.assertEqual(self.pa.encode('Sutton', 4), ('STN', ''))
        self.assertEqual(self.pa.encode('Swain', 4), ('SN', 'XN'))
        self.assertEqual(self.pa.encode('Swayne', 4), ('SN', 'XN'))
        self.assertEqual(self.pa.encode('Swayze', 4), ('SS', 'XTS'))
        self.assertEqual(self.pa.encode('Swift', 4), ('SFT', 'XFT'))
        self.assertEqual(self.pa.encode('Taber', 4), ('TPR', ''))
        self.assertEqual(self.pa.encode('Talcott', 4), ('TLKT', ''))
        self.assertEqual(self.pa.encode('Tarne', 4), ('TRN', ''))
        self.assertEqual(self.pa.encode('Tatum', 4), ('TTM', ''))
        self.assertEqual(self.pa.encode('Taverner', 4), ('TFRN', ''))
        self.assertEqual(self.pa.encode('Taylor', 4), ('TLR', ''))
        self.assertEqual(self.pa.encode('Tenney', 4), ('TN', ''))
        self.assertEqual(self.pa.encode('Thayer', 4), ('0R', 'TR'))
        self.assertEqual(self.pa.encode('Thember', 4), ('0MPR', 'TMPR'))
        self.assertEqual(self.pa.encode('Thomas', 4), ('TMS', ''))
        self.assertEqual(self.pa.encode('Thompson', 4), ('TMPS', ''))
        self.assertEqual(self.pa.encode('Thorne', 4), ('0RN', 'TRN'))
        self.assertEqual(self.pa.encode('Thornycraft', 4), ('0RNK', 'TRNK'))
        self.assertEqual(self.pa.encode('Threlkeld', 4), ('0RLK', 'TRLK'))
        self.assertEqual(self.pa.encode('Throckmorton', 4), ('0RKM', 'TRKM'))
        self.assertEqual(self.pa.encode('Thwaits', 4), ('0TS', 'TTS'))
        self.assertEqual(self.pa.encode('Tibbetts', 4), ('TPTS', ''))
        self.assertEqual(self.pa.encode('Tidd', 4), ('TT', ''))
        self.assertEqual(self.pa.encode('Tierney', 4), ('TRN', ''))
        self.assertEqual(self.pa.encode('Tilley', 4), ('TL', ''))
        self.assertEqual(self.pa.encode('Tillieres', 4), ('TLRS', ''))
        self.assertEqual(self.pa.encode('Tilly', 4), ('TL', ''))
        self.assertEqual(self.pa.encode('Tisdale', 4), ('TSTL', ''))
        self.assertEqual(self.pa.encode('Titus', 4), ('TTS', ''))
        self.assertEqual(self.pa.encode('Tobey', 4), ('TP', ''))
        self.assertEqual(self.pa.encode('Tooker', 4), ('TKR', ''))
        self.assertEqual(self.pa.encode('Towle', 4), ('TL', ''))
        self.assertEqual(self.pa.encode('Towne', 4), ('TN', ''))
        self.assertEqual(self.pa.encode('Townsend', 4), ('TNSN', ''))
        self.assertEqual(self.pa.encode('Treadway', 4), ('TRT', ''))
        self.assertEqual(self.pa.encode('Trelawney', 4), ('TRLN', ''))
        self.assertEqual(self.pa.encode('Trinder', 4), ('TRNT', ''))
        self.assertEqual(self.pa.encode('Tripp', 4), ('TRP', ''))
        self.assertEqual(self.pa.encode('Trippe', 4), ('TRP', ''))
        self.assertEqual(self.pa.encode('Trott', 4), ('TRT', ''))
        self.assertEqual(self.pa.encode('True', 4), ('TR', ''))
        self.assertEqual(self.pa.encode('Trussebut', 4), ('TRSP', ''))
        self.assertEqual(self.pa.encode('Tucker', 4), ('TKR', ''))
        self.assertEqual(self.pa.encode('Turgeon', 4), ('TRJN', 'TRKN'))
        self.assertEqual(self.pa.encode('Turner', 4), ('TRNR', ''))
        self.assertEqual(self.pa.encode('Tuttle', 4), ('TTL', ''))
        self.assertEqual(self.pa.encode('Tyler', 4), ('TLR', ''))
        self.assertEqual(self.pa.encode('Tylle', 4), ('TL', ''))
        self.assertEqual(self.pa.encode('Tyrrel', 4), ('TRL', ''))
        self.assertEqual(self.pa.encode('Ua Tuathail', 4), ('AT0L', 'ATTL'))
        self.assertEqual(self.pa.encode('Ulrich', 4), ('ALRX', 'ALRK'))
        self.assertEqual(self.pa.encode('Underhill', 4), ('ANTR', ''))
        self.assertEqual(self.pa.encode('Underwood', 4), ('ANTR', ''))
        self.assertEqual(self.pa.encode('Unknown', 4), ('ANKN', ''))
        self.assertEqual(self.pa.encode('Valentine', 4), ('FLNT', ''))
        self.assertEqual(self.pa.encode('Van Egmond', 4), ('FNKM', ''))
        self.assertEqual(self.pa.encode('Van der Beek', 4), ('FNTR', ''))
        self.assertEqual(self.pa.encode('Vaughan', 4), ('FKN', ''))
        self.assertEqual(self.pa.encode('Vermenlen', 4), ('FRMN', ''))
        self.assertEqual(self.pa.encode('Vincent', 4), ('FNSN', ''))
        self.assertEqual(self.pa.encode('Volentine', 4), ('FLNT', ''))
        self.assertEqual(self.pa.encode('Wagner', 4), ('AKNR', 'FKNR'))
        self.assertEqual(self.pa.encode('Waite', 4), ('AT', 'FT'))
        self.assertEqual(self.pa.encode('Walker', 4), ('ALKR', 'FLKR'))
        self.assertEqual(self.pa.encode('Walter', 4), ('ALTR', 'FLTR'))
        self.assertEqual(self.pa.encode('Wandell', 4), ('ANTL', 'FNTL'))
        self.assertEqual(self.pa.encode('Wandesford', 4), ('ANTS', 'FNTS'))
        self.assertEqual(self.pa.encode('Warbleton', 4), ('ARPL', 'FRPL'))
        self.assertEqual(self.pa.encode('Ward', 4), ('ART', 'FRT'))
        self.assertEqual(self.pa.encode('Warde', 4), ('ART', 'FRT'))
        self.assertEqual(self.pa.encode('Ware', 4), ('AR', 'FR'))
        self.assertEqual(self.pa.encode('Wareham', 4), ('ARHM', 'FRHM'))
        self.assertEqual(self.pa.encode('Warner', 4), ('ARNR', 'FRNR'))
        self.assertEqual(self.pa.encode('Warren', 4), ('ARN', 'FRN'))
        self.assertEqual(self.pa.encode('Washburne', 4), ('AXPR', 'FXPR'))
        self.assertEqual(self.pa.encode('Waterbury', 4), ('ATRP', 'FTRP'))
        self.assertEqual(self.pa.encode('Watson', 4), ('ATSN', 'FTSN'))
        self.assertEqual(
            self.pa.encode('WatsonEllithorpe', 4), ('ATSN', 'FTSN')
        )
        self.assertEqual(self.pa.encode('Watts', 4), ('ATS', 'FTS'))
        self.assertEqual(self.pa.encode('Wayne', 4), ('AN', 'FN'))
        self.assertEqual(self.pa.encode('Webb', 4), ('AP', 'FP'))
        self.assertEqual(self.pa.encode('Weber', 4), ('APR', 'FPR'))
        self.assertEqual(self.pa.encode('Webster', 4), ('APST', 'FPST'))
        self.assertEqual(self.pa.encode('Weed', 4), ('AT', 'FT'))
        self.assertEqual(self.pa.encode('Weeks', 4), ('AKS', 'FKS'))
        self.assertEqual(self.pa.encode('Wells', 4), ('ALS', 'FLS'))
        self.assertEqual(self.pa.encode('Wenzell', 4), ('ANSL', 'FNTS'))
        self.assertEqual(self.pa.encode('West', 4), ('AST', 'FST'))
        self.assertEqual(self.pa.encode('Westbury', 4), ('ASTP', 'FSTP'))
        self.assertEqual(self.pa.encode('Whatlocke', 4), ('ATLK', ''))
        self.assertEqual(self.pa.encode('Wheeler', 4), ('ALR', ''))
        self.assertEqual(self.pa.encode('Whiston', 4), ('ASTN', ''))
        self.assertEqual(self.pa.encode('White', 4), ('AT', ''))
        self.assertEqual(self.pa.encode('Whitman', 4), ('ATMN', ''))
        self.assertEqual(self.pa.encode('Whiton', 4), ('ATN', ''))
        self.assertEqual(self.pa.encode('Whitson', 4), ('ATSN', ''))
        self.assertEqual(self.pa.encode('Wickes', 4), ('AKS', 'FKS'))
        self.assertEqual(self.pa.encode('Wilbur', 4), ('ALPR', 'FLPR'))
        self.assertEqual(self.pa.encode('Wilcotes', 4), ('ALKT', 'FLKT'))
        self.assertEqual(self.pa.encode('Wilkinson', 4), ('ALKN', 'FLKN'))
        self.assertEqual(self.pa.encode('Willets', 4), ('ALTS', 'FLTS'))
        self.assertEqual(self.pa.encode('Willett', 4), ('ALT', 'FLT'))
        self.assertEqual(self.pa.encode('Willey', 4), ('AL', 'FL'))
        self.assertEqual(self.pa.encode('Williams', 4), ('ALMS', 'FLMS'))
        self.assertEqual(self.pa.encode('Williston', 4), ('ALST', 'FLST'))
        self.assertEqual(self.pa.encode('Wilson', 4), ('ALSN', 'FLSN'))
        self.assertEqual(self.pa.encode('Wimes', 4), ('AMS', 'FMS'))
        self.assertEqual(self.pa.encode('Winch', 4), ('ANX', 'FNK'))
        self.assertEqual(self.pa.encode('Winegar', 4), ('ANKR', 'FNKR'))
        self.assertEqual(self.pa.encode('Wing', 4), ('ANK', 'FNK'))
        self.assertEqual(self.pa.encode('Winsley', 4), ('ANSL', 'FNSL'))
        self.assertEqual(self.pa.encode('Winslow', 4), ('ANSL', 'FNSL'))
        self.assertEqual(self.pa.encode('Winthrop', 4), ('AN0R', 'FNTR'))
        self.assertEqual(self.pa.encode('Wise', 4), ('AS', 'FS'))
        self.assertEqual(self.pa.encode('Wood', 4), ('AT', 'FT'))
        self.assertEqual(self.pa.encode('Woodbridge', 4), ('ATPR', 'FTPR'))
        self.assertEqual(self.pa.encode('Woodward', 4), ('ATRT', 'FTRT'))
        self.assertEqual(self.pa.encode('Wooley', 4), ('AL', 'FL'))
        self.assertEqual(self.pa.encode('Woolley', 4), ('AL', 'FL'))
        self.assertEqual(self.pa.encode('Worth', 4), ('AR0', 'FRT'))
        self.assertEqual(self.pa.encode('Worthen', 4), ('AR0N', 'FRTN'))
        self.assertEqual(self.pa.encode('Worthley', 4), ('AR0L', 'FRTL'))
        self.assertEqual(self.pa.encode('Wright', 4), ('RT', ''))
        self.assertEqual(self.pa.encode('Wyer', 4), ('AR', 'FR'))
        self.assertEqual(self.pa.encode('Wyere', 4), ('AR', 'FR'))
        self.assertEqual(self.pa.encode('Wynkoop', 4), ('ANKP', 'FNKP'))
        self.assertEqual(self.pa.encode('Yarnall', 4), ('ARNL', ''))
        self.assertEqual(self.pa.encode('Yeoman', 4), ('AMN', ''))
        self.assertEqual(self.pa.encode('Yorke', 4), ('ARK', ''))
        self.assertEqual(self.pa.encode('Young', 4), ('ANK', ''))
        self.assertEqual(self.pa.encode('ab Wennonwen', 4), ('APNN', ''))
        self.assertEqual(self.pa.encode('ap Llewellyn', 4), ('APLL', ''))
        self.assertEqual(self.pa.encode('ap Lorwerth', 4), ('APLR', ''))
        self.assertEqual(self.pa.encode('d\'Angouleme', 4), ('TNKL', ''))
        self.assertEqual(self.pa.encode('de Audeham', 4), ('TTHM', ''))
        self.assertEqual(self.pa.encode('de Bavant', 4), ('TPFN', ''))
        self.assertEqual(self.pa.encode('de Beauchamp', 4), ('TPXM', 'TPKM'))
        self.assertEqual(self.pa.encode('de Beaumont', 4), ('TPMN', ''))
        self.assertEqual(self.pa.encode('de Bolbec', 4), ('TPLP', ''))
        self.assertEqual(self.pa.encode('de Braiose', 4), ('TPRS', ''))
        self.assertEqual(self.pa.encode('de Braose', 4), ('TPRS', ''))
        self.assertEqual(self.pa.encode('de Briwere', 4), ('TPRR', ''))
        self.assertEqual(self.pa.encode('de Cantelou', 4), ('TKNT', ''))
        self.assertEqual(self.pa.encode('de Cherelton', 4), ('TXRL', 'TKRL'))
        self.assertEqual(self.pa.encode('de Cherleton', 4), ('TXRL', 'TKRL'))
        self.assertEqual(self.pa.encode('de Clare', 4), ('TKLR', ''))
        self.assertEqual(self.pa.encode('de Claremont', 4), ('TKLR', ''))
        self.assertEqual(self.pa.encode('de Clifford', 4), ('TKLF', ''))
        self.assertEqual(self.pa.encode('de Colville', 4), ('TKLF', ''))
        self.assertEqual(self.pa.encode('de Courtenay', 4), ('TKRT', ''))
        self.assertEqual(self.pa.encode('de Fauconberg', 4), ('TFKN', ''))
        self.assertEqual(self.pa.encode('de Forest', 4), ('TFRS', ''))
        self.assertEqual(self.pa.encode('de Gai', 4), ('TK', ''))
        self.assertEqual(self.pa.encode('de Grey', 4), ('TKR', ''))
        self.assertEqual(self.pa.encode('de Guernons', 4), ('TKRN', ''))
        self.assertEqual(self.pa.encode('de Haia', 4), ('T', ''))
        self.assertEqual(self.pa.encode('de Harcourt', 4), ('TRKR', ''))
        self.assertEqual(self.pa.encode('de Hastings', 4), ('TSTN', ''))
        self.assertEqual(self.pa.encode('de Hoke', 4), ('TK', ''))
        self.assertEqual(self.pa.encode('de Hooch', 4), ('TK', ''))
        self.assertEqual(self.pa.encode('de Hugelville', 4), ('TJLF', 'TKLF'))
        self.assertEqual(self.pa.encode('de Huntingdon', 4), ('TNTN', ''))
        self.assertEqual(self.pa.encode('de Insula', 4), ('TNSL', ''))
        self.assertEqual(self.pa.encode('de Keynes', 4), ('TKNS', ''))
        self.assertEqual(self.pa.encode('de Lacy', 4), ('TLS', ''))
        self.assertEqual(self.pa.encode('de Lexington', 4), ('TLKS', ''))
        self.assertEqual(self.pa.encode('de Lusignan', 4), ('TLSN', 'TLSK'))
        self.assertEqual(self.pa.encode('de Manvers', 4), ('TMNF', ''))
        self.assertEqual(self.pa.encode('de Montagu', 4), ('TMNT', ''))
        self.assertEqual(self.pa.encode('de Montault', 4), ('TMNT', ''))
        self.assertEqual(self.pa.encode('de Montfort', 4), ('TMNT', ''))
        self.assertEqual(self.pa.encode('de Mortimer', 4), ('TMRT', ''))
        self.assertEqual(self.pa.encode('de Morville', 4), ('TMRF', ''))
        self.assertEqual(self.pa.encode('de Morvois', 4), ('TMRF', ''))
        self.assertEqual(self.pa.encode('de Neufmarche', 4), ('TNFM', ''))
        self.assertEqual(self.pa.encode('de Odingsells', 4), ('TTNK', ''))
        self.assertEqual(self.pa.encode('de Odyngsells', 4), ('TTNK', ''))
        self.assertEqual(self.pa.encode('de Percy', 4), ('TPRS', ''))
        self.assertEqual(self.pa.encode('de Pierrepont', 4), ('TPRP', ''))
        self.assertEqual(self.pa.encode('de Plessetis', 4), ('TPLS', ''))
        self.assertEqual(self.pa.encode('de Porhoet', 4), ('TPRT', ''))
        self.assertEqual(self.pa.encode('de Prouz', 4), ('TPRS', ''))
        self.assertEqual(self.pa.encode('de Quincy', 4), ('TKNS', ''))
        self.assertEqual(self.pa.encode('de Ripellis', 4), ('TRPL', ''))
        self.assertEqual(self.pa.encode('de Ros', 4), ('TRS', ''))
        self.assertEqual(self.pa.encode('de Salisbury', 4), ('TSLS', ''))
        self.assertEqual(self.pa.encode('de Sanford', 4), ('TSNF', ''))
        self.assertEqual(self.pa.encode('de Somery', 4), ('TSMR', ''))
        self.assertEqual(self.pa.encode('de St. Hilary', 4), ('TSTL', ''))
        self.assertEqual(self.pa.encode('de St. Liz', 4), ('TSTL', ''))
        self.assertEqual(self.pa.encode('de Sutton', 4), ('TSTN', ''))
        self.assertEqual(self.pa.encode('de Toeni', 4), ('TTN', ''))
        self.assertEqual(self.pa.encode('de Tony', 4), ('TTN', ''))
        self.assertEqual(self.pa.encode('de Umfreville', 4), ('TMFR', ''))
        self.assertEqual(self.pa.encode('de Valognes', 4), ('TFLN', 'TFLK'))
        self.assertEqual(self.pa.encode('de Vaux', 4), ('TF', ''))
        self.assertEqual(self.pa.encode('de Vere', 4), ('TFR', ''))
        self.assertEqual(self.pa.encode('de Vermandois', 4), ('TFRM', ''))
        self.assertEqual(self.pa.encode('de Vernon', 4), ('TFRN', ''))
        self.assertEqual(self.pa.encode('de Vexin', 4), ('TFKS', ''))
        self.assertEqual(self.pa.encode('de Vitre', 4), ('TFTR', ''))
        self.assertEqual(self.pa.encode('de Wandesford', 4), ('TNTS', ''))
        self.assertEqual(self.pa.encode('de Warenne', 4), ('TRN', ''))
        self.assertEqual(self.pa.encode('de Westbury', 4), ('TSTP', ''))
        self.assertEqual(self.pa.encode('di Saluzzo', 4), ('TSLS', 'TSLT'))
        self.assertEqual(self.pa.encode('fitz Alan', 4), ('FTSL', ''))
        self.assertEqual(self.pa.encode('fitz Geoffrey', 4), ('FTSJ', 'FTSK'))
        self.assertEqual(self.pa.encode('fitz Herbert', 4), ('FTSR', ''))
        self.assertEqual(self.pa.encode('fitz John', 4), ('FTSJ', ''))
        self.assertEqual(self.pa.encode('fitz Patrick', 4), ('FTSP', ''))
        self.assertEqual(self.pa.encode('fitz Payn', 4), ('FTSP', ''))
        self.assertEqual(self.pa.encode('fitz Piers', 4), ('FTSP', ''))
        self.assertEqual(self.pa.encode('fitz Randolph', 4), ('FTSR', ''))
        self.assertEqual(self.pa.encode('fitz Richard', 4), ('FTSR', ''))
        self.assertEqual(self.pa.encode('fitz Robert', 4), ('FTSR', ''))
        self.assertEqual(self.pa.encode('fitz Roy', 4), ('FTSR', ''))
        self.assertEqual(self.pa.encode('fitz Scrob', 4), ('FTSS', ''))
        self.assertEqual(self.pa.encode('fitz Walter', 4), ('FTSL', ''))
        self.assertEqual(self.pa.encode('fitz Warin', 4), ('FTSR', ''))
        self.assertEqual(self.pa.encode('fitz Williams', 4), ('FTSL', ''))
        self.assertEqual(self.pa.encode('la Zouche', 4), ('LSX', 'LSK'))
        self.assertEqual(self.pa.encode('le Botiller', 4), ('LPTL', ''))
        self.assertEqual(self.pa.encode('le Despenser', 4), ('LTSP', ''))
        self.assertEqual(self.pa.encode('le deSpencer', 4), ('LTSP', ''))
        self.assertEqual(self.pa.encode('of Allendale', 4), ('AFLN', ''))
        self.assertEqual(self.pa.encode('of Angouleme', 4), ('AFNK', ''))
        self.assertEqual(self.pa.encode('of Anjou', 4), ('AFNJ', ''))
        self.assertEqual(self.pa.encode('of Aquitaine', 4), ('AFKT', ''))
        self.assertEqual(self.pa.encode('of Aumale', 4), ('AFML', ''))
        self.assertEqual(self.pa.encode('of Bavaria', 4), ('AFPF', ''))
        self.assertEqual(self.pa.encode('of Boulogne', 4), ('AFPL', ''))
        self.assertEqual(self.pa.encode('of Brittany', 4), ('AFPR', ''))
        self.assertEqual(self.pa.encode('of Brittary', 4), ('AFPR', ''))
        self.assertEqual(self.pa.encode('of Castile', 4), ('AFKS', ''))
        self.assertEqual(self.pa.encode('of Chester', 4), ('AFXS', 'AFKS'))
        self.assertEqual(self.pa.encode('of Clermont', 4), ('AFKL', ''))
        self.assertEqual(self.pa.encode('of Cologne', 4), ('AFKL', ''))
        self.assertEqual(self.pa.encode('of Dinan', 4), ('AFTN', ''))
        self.assertEqual(self.pa.encode('of Dunbar', 4), ('AFTN', ''))
        self.assertEqual(self.pa.encode('of England', 4), ('AFNK', ''))
        self.assertEqual(self.pa.encode('of Essex', 4), ('AFSK', ''))
        self.assertEqual(self.pa.encode('of Falaise', 4), ('AFFL', ''))
        self.assertEqual(self.pa.encode('of Flanders', 4), ('AFFL', ''))
        self.assertEqual(self.pa.encode('of Galloway', 4), ('AFKL', ''))
        self.assertEqual(self.pa.encode('of Germany', 4), ('AFKR', 'AFJR'))
        self.assertEqual(self.pa.encode('of Gloucester', 4), ('AFKL', ''))
        self.assertEqual(self.pa.encode('of Heristal', 4), ('AFRS', ''))
        self.assertEqual(self.pa.encode('of Hungary', 4), ('AFNK', ''))
        self.assertEqual(self.pa.encode('of Huntington', 4), ('AFNT', ''))
        self.assertEqual(self.pa.encode('of Kiev', 4), ('AFKF', ''))
        self.assertEqual(self.pa.encode('of Kuno', 4), ('AFKN', ''))
        self.assertEqual(self.pa.encode('of Landen', 4), ('AFLN', ''))
        self.assertEqual(self.pa.encode('of Laon', 4), ('AFLN', ''))
        self.assertEqual(self.pa.encode('of Leinster', 4), ('AFLN', ''))
        self.assertEqual(self.pa.encode('of Lens', 4), ('AFLN', ''))
        self.assertEqual(self.pa.encode('of Lorraine', 4), ('AFLR', ''))
        self.assertEqual(self.pa.encode('of Louvain', 4), ('AFLF', ''))
        self.assertEqual(self.pa.encode('of Mercia', 4), ('AFMR', ''))
        self.assertEqual(self.pa.encode('of Metz', 4), ('AFMT', ''))
        self.assertEqual(self.pa.encode('of Meulan', 4), ('AFML', ''))
        self.assertEqual(self.pa.encode('of Nass', 4), ('AFNS', ''))
        self.assertEqual(self.pa.encode('of Normandy', 4), ('AFNR', ''))
        self.assertEqual(self.pa.encode('of Ohningen', 4), ('AFNN', ''))
        self.assertEqual(self.pa.encode('of Orleans', 4), ('AFRL', ''))
        self.assertEqual(self.pa.encode('of Poitou', 4), ('AFPT', ''))
        self.assertEqual(self.pa.encode('of Polotzk', 4), ('AFPL', ''))
        self.assertEqual(self.pa.encode('of Provence', 4), ('AFPR', ''))
        self.assertEqual(self.pa.encode('of Ringelheim', 4), ('AFRN', ''))
        self.assertEqual(self.pa.encode('of Salisbury', 4), ('AFSL', ''))
        self.assertEqual(self.pa.encode('of Saxony', 4), ('AFSK', ''))
        self.assertEqual(self.pa.encode('of Scotland', 4), ('AFSK', ''))
        self.assertEqual(self.pa.encode('of Senlis', 4), ('AFSN', ''))
        self.assertEqual(self.pa.encode('of Stafford', 4), ('AFST', ''))
        self.assertEqual(self.pa.encode('of Swabia', 4), ('AFSP', ''))
        self.assertEqual(self.pa.encode('of Tongres', 4), ('AFTN', ''))
        self.assertEqual(
            self.pa.encode('of the Tributes', 4), ('AF0T', 'AFTT')
        )
        self.assertEqual(self.pa.encode('unknown', 4), ('ANKN', ''))
        self.assertEqual(self.pa.encode('van der Gouda', 4), ('FNTR', ''))
        self.assertEqual(self.pa.encode('von Adenbaugh', 4), ('FNTN', ''))
        self.assertEqual(self.pa.encode('ARCHITure', 4), ('ARKT', ''))
        self.assertEqual(self.pa.encode('Arnoff', 4), ('ARNF', ''))
        self.assertEqual(self.pa.encode('Arnow', 4), ('ARN', 'ARNF'))
        self.assertEqual(self.pa.encode('DANGER', 4), ('TNJR', 'TNKR'))
        self.assertEqual(self.pa.encode('Jankelowicz', 4), ('JNKL', 'ANKL'))
        self.assertEqual(self.pa.encode('MANGER', 4), ('MNJR', 'MNKR'))
        self.assertEqual(self.pa.encode('McClellan', 4), ('MKLL', ''))
        self.assertEqual(self.pa.encode('McHugh', 4), ('MK', ''))
        self.assertEqual(self.pa.encode('McLaughlin', 4), ('MKLF', ''))
        self.assertEqual(self.pa.encode('ORCHEStra', 4), ('ARKS', ''))
        self.assertEqual(self.pa.encode('ORCHID', 4), ('ARKT', ''))
        self.assertEqual(self.pa.encode('Pierce', 4), ('PRS', ''))
        self.assertEqual(self.pa.encode('RANGER', 4), ('RNJR', 'RNKR'))
        self.assertEqual(self.pa.encode('Schlesinger', 4), ('XLSN', 'SLSN'))
        self.assertEqual(self.pa.encode('Uomo', 4), ('AM', ''))
        self.assertEqual(self.pa.encode('Vasserman', 4), ('FSRM', ''))
        self.assertEqual(self.pa.encode('Wasserman', 4), ('ASRM', 'FSRM'))
        self.assertEqual(self.pa.encode('Womo', 4), ('AM', 'FM'))
        self.assertEqual(self.pa.encode('Yankelovich', 4), ('ANKL', ''))
        self.assertEqual(self.pa.encode('accede', 4), ('AKST', ''))
        self.assertEqual(self.pa.encode('accident', 4), ('AKST', ''))
        self.assertEqual(self.pa.encode('adelsheim', 4), ('ATLS', ''))
        self.assertEqual(self.pa.encode('aged', 4), ('AJT', 'AKT'))
        self.assertEqual(self.pa.encode('ageless', 4), ('AJLS', 'AKLS'))
        self.assertEqual(self.pa.encode('agency', 4), ('AJNS', 'AKNS'))
        self.assertEqual(self.pa.encode('aghast', 4), ('AKST', ''))
        self.assertEqual(self.pa.encode('agio', 4), ('AJ', 'AK'))
        self.assertEqual(self.pa.encode('agrimony', 4), ('AKRM', ''))
        self.assertEqual(self.pa.encode('album', 4), ('ALPM', ''))
        self.assertEqual(self.pa.encode('alcmene', 4), ('ALKM', ''))
        self.assertEqual(self.pa.encode('alehouse', 4), ('ALHS', ''))
        self.assertEqual(self.pa.encode('antique', 4), ('ANTK', ''))
        self.assertEqual(self.pa.encode('artois', 4), ('ART', 'ARTS'))
        self.assertEqual(self.pa.encode('automation', 4), ('ATMX', ''))
        self.assertEqual(self.pa.encode('bacchus', 4), ('PKS', ''))
        self.assertEqual(self.pa.encode('bacci', 4), ('PX', ''))
        self.assertEqual(self.pa.encode('bajador', 4), ('PJTR', 'PHTR'))
        self.assertEqual(self.pa.encode('bellocchio', 4), ('PLX', ''))
        self.assertEqual(self.pa.encode('bertucci', 4), ('PRTX', ''))
        self.assertEqual(self.pa.encode('biaggi', 4), ('PJ', 'PK'))
        self.assertEqual(self.pa.encode('bough', 4), ('P', ''))
        self.assertEqual(self.pa.encode('breaux', 4), ('PR', ''))
        self.assertEqual(self.pa.encode('broughton', 4), ('PRTN', ''))
        self.assertEqual(self.pa.encode('cabrillo', 4), ('KPRL', 'KPR'))
        self.assertEqual(self.pa.encode('caesar', 4), ('SSR', ''))
        self.assertEqual(self.pa.encode('cagney', 4), ('KKN', ''))
        self.assertEqual(self.pa.encode('campbell', 4), ('KMPL', ''))
        self.assertEqual(self.pa.encode('carlisle', 4), ('KRLL', ''))
        self.assertEqual(self.pa.encode('carlysle', 4), ('KRLL', ''))
        self.assertEqual(self.pa.encode('chemistry', 4), ('KMST', ''))
        self.assertEqual(self.pa.encode('chianti', 4), ('KNT', ''))
        self.assertEqual(self.pa.encode('chorus', 4), ('KRS', ''))
        self.assertEqual(self.pa.encode('cough', 4), ('KF', ''))
        self.assertEqual(self.pa.encode('czerny', 4), ('SRN', 'XRN'))
        self.assertEqual(self.pa.encode('deffenbacher', 4), ('TFNP', ''))
        self.assertEqual(self.pa.encode('dumb', 4), ('TM', ''))
        self.assertEqual(self.pa.encode('edgar', 4), ('ATKR', ''))
        self.assertEqual(self.pa.encode('edge', 4), ('AJ', ''))
        self.assertEqual(self.pa.encode('filipowicz', 4), ('FLPT', 'FLPF'))
        self.assertEqual(self.pa.encode('focaccia', 4), ('FKX', ''))
        self.assertEqual(self.pa.encode('gallegos', 4), ('KLKS', 'KKS'))
        self.assertEqual(self.pa.encode('gambrelli', 4), ('KMPR', ''))
        self.assertEqual(self.pa.encode('geithain', 4), ('K0N', 'JTN'))
        self.assertEqual(self.pa.encode('ghiradelli', 4), ('JRTL', ''))
        self.assertEqual(self.pa.encode('ghislane', 4), ('JLN', ''))
        self.assertEqual(self.pa.encode('gough', 4), ('KF', ''))
        self.assertEqual(self.pa.encode('hartheim', 4), ('HR0M', 'HRTM'))
        self.assertEqual(self.pa.encode('heimsheim', 4), ('HMSM', ''))
        self.assertEqual(self.pa.encode('hochmeier', 4), ('HKMR', ''))
        self.assertEqual(self.pa.encode('hugh', 4), ('H', ''))
        self.assertEqual(self.pa.encode('hunger', 4), ('HNKR', 'HNJR'))
        self.assertEqual(self.pa.encode('hungry', 4), ('HNKR', ''))
        self.assertEqual(self.pa.encode('island', 4), ('ALNT', ''))
        self.assertEqual(self.pa.encode('isle', 4), ('AL', ''))
        self.assertEqual(self.pa.encode('jose', 4), ('HS', ''))
        self.assertEqual(self.pa.encode('laugh', 4), ('LF', ''))
        self.assertEqual(self.pa.encode('mac caffrey', 4), ('MKFR', ''))
        self.assertEqual(self.pa.encode('mac gregor', 4), ('MKRK', ''))
        self.assertEqual(self.pa.encode('pegnitz', 4), ('PNTS', 'PKNT'))
        self.assertEqual(self.pa.encode('piskowitz', 4), ('PSKT', 'PSKF'))
        self.assertEqual(self.pa.encode('queen', 4), ('KN', ''))
        self.assertEqual(self.pa.encode('raspberry', 4), ('RSPR', ''))
        self.assertEqual(self.pa.encode('resnais', 4), ('RSN', 'RSNS'))
        self.assertEqual(self.pa.encode('rogier', 4), ('RJ', 'RJR'))
        self.assertEqual(self.pa.encode('rough', 4), ('RF', ''))
        self.assertEqual(self.pa.encode('san jacinto', 4), ('SNHS', ''))
        self.assertEqual(self.pa.encode('schenker', 4), ('XNKR', 'SKNK'))
        self.assertEqual(self.pa.encode('schermerhorn', 4), ('XRMR', 'SKRM'))
        self.assertEqual(self.pa.encode('schmidt', 4), ('XMT', 'SMT'))
        self.assertEqual(self.pa.encode('schneider', 4), ('XNTR', 'SNTR'))
        self.assertEqual(self.pa.encode('school', 4), ('SKL', ''))
        self.assertEqual(self.pa.encode('schooner', 4), ('SKNR', ''))
        self.assertEqual(self.pa.encode('schrozberg', 4), ('XRSP', 'SRSP'))
        self.assertEqual(self.pa.encode('schulman', 4), ('XLMN', ''))
        self.assertEqual(self.pa.encode('schwabach', 4), ('XPK', 'XFPK'))
        self.assertEqual(self.pa.encode('schwarzach', 4), ('XRSK', 'XFRT'))
        self.assertEqual(self.pa.encode('smith', 4), ('SM0', 'XMT'))
        self.assertEqual(self.pa.encode('snider', 4), ('SNTR', 'XNTR'))
        self.assertEqual(self.pa.encode('succeed', 4), ('SKST', ''))
        self.assertEqual(self.pa.encode('sugarcane', 4), ('XKRK', 'SKRK'))
        self.assertEqual(self.pa.encode('svobodka', 4), ('SFPT', ''))
        self.assertEqual(self.pa.encode('tagliaro', 4), ('TKLR', 'TLR'))
        self.assertEqual(self.pa.encode('thames', 4), ('TMS', ''))
        self.assertEqual(self.pa.encode('theilheim', 4), ('0LM', 'TLM'))
        self.assertEqual(self.pa.encode('thomas', 4), ('TMS', ''))
        self.assertEqual(self.pa.encode('thumb', 4), ('0M', 'TM'))
        self.assertEqual(self.pa.encode('tichner', 4), ('TXNR', 'TKNR'))
        self.assertEqual(self.pa.encode('tough', 4), ('TF', ''))
        self.assertEqual(self.pa.encode('umbrella', 4), ('AMPR', ''))
        self.assertEqual(self.pa.encode('vilshofen', 4), ('FLXF', ''))
        self.assertEqual(self.pa.encode('von schuller', 4), ('FNXL', ''))
        self.assertEqual(self.pa.encode('wachtler', 4), ('AKTL', 'FKTL'))
        self.assertEqual(self.pa.encode('wechsler', 4), ('AKSL', 'FKSL'))
        self.assertEqual(self.pa.encode('weikersheim', 4), ('AKRS', 'FKRS'))
        self.assertEqual(self.pa.encode('zhao', 4), ('J', ''))


if __name__ == '__main__':
    unittest.main()
